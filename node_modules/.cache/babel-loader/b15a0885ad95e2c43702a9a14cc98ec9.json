{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Tools/FilterOrderByAudioFeature.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { DropdownButton, Dropdown, InputGroup } from \"react-bootstrap\";\nimport { availableTrackAudioFeatures } from \"../../models/Spotify\";\n\nconst FilterOrderByAudioFeature = props => {\n  const {\n    outputCallback\n  } = props;\n  const [feature, setFeature] = useState(\"Energy\");\n  useEffect(() => {\n    const audio_feature_key = availableTrackAudioFeatures[feature].key;\n    outputCallback(tracks => tracks.sort((a, b) => {\n      const a_audio_feature_value = a.audio_features === undefined || a.audio_features === null ? 0 : a.audio_features[audio_feature_key];\n      const b_audio_feature_value = b.audio_features === undefined || b.audio_features === null ? 0 : b.audio_features[audio_feature_key];\n      return b_audio_feature_value - a_audio_feature_value;\n    }), `Order songs by ${feature}`);\n  }, [feature]);\n\n  const setFeatureFromDropdown = featureValue => () => setFeature(featureValue);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-1 d-inline-flex w-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"Audio Feature\")), /*#__PURE__*/React.createElement(DropdownButton, {\n    as: InputGroup.Append,\n    id: \"dropdown-feature\",\n    title: feature,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, Object.keys(availableTrackAudioFeatures).map(af => /*#__PURE__*/React.createElement(Dropdown.Item, {\n    key: af,\n    onClick: setFeatureFromDropdown(af),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, af)))));\n};\n\nexport default FilterOrderByAudioFeature;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Tools/FilterOrderByAudioFeature.tsx"],"names":["React","useEffect","useState","DropdownButton","Dropdown","InputGroup","availableTrackAudioFeatures","FilterOrderByAudioFeature","props","outputCallback","feature","setFeature","audio_feature_key","key","tracks","sort","a","b","a_audio_feature_value","audio_features","undefined","b_audio_feature_value","setFeatureFromDropdown","featureValue","Append","Object","keys","map","af"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,EAAyBC,QAAzB,EAAmCC,UAAnC,QAAqD,iBAArD;AAEA,SAAiCC,2BAAjC,QAAoE,sBAApE;;AAIA,MAAMC,yBAA0D,GAAIC,KAAD,IAAmB;AACpF,QAAM;AAAEC,IAAAA;AAAF,MAAqBD,KAA3B;AAEA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,QAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,iBAAuD,GAC3DN,2BAA2B,CAACI,OAAD,CAA3B,CAAqCG,GADvC;AAEAJ,IAAAA,cAAc,CACXK,MAAD,IACEA,MAAM,CAACC,IAAP,CAAY,CAACC,CAAD,EAA4BC,CAA5B,KAAkE;AAC5E,YAAMC,qBAA6B,GACjCF,CAAC,CAACG,cAAF,KAAqBC,SAArB,IAAkCJ,CAAC,CAACG,cAAF,KAAqB,IAAvD,GACI,CADJ,GAEKH,CAAC,CAACG,cAAF,CAAiBP,iBAAjB,CAHP;AAIA,YAAMS,qBAA6B,GACjCJ,CAAC,CAACE,cAAF,KAAqBC,SAArB,IAAkCH,CAAC,CAACE,cAAF,KAAqB,IAAvD,GACI,CADJ,GAEKF,CAAC,CAACE,cAAF,CAAiBP,iBAAjB,CAHP;AAIA,aAAOS,qBAAqB,GAAGH,qBAA/B;AACD,KAVD,CAFU,EAaX,kBAAiBR,OAAQ,EAbd,CAAd;AAeD,GAlBQ,EAkBN,CAACA,OAAD,CAlBM,CAAT;;AAoBA,QAAMY,sBAAsB,GAAIC,YAAD,IAA0B,MAAMZ,UAAU,CAACY,YAAD,CAAzE;;AAEA,sBACE,uDACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,2BAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD,CAAY,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD,CAAY,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CADF,eAIE,oBAAC,cAAD;AAAgB,IAAA,EAAE,EAAElB,UAAU,CAACmB,MAA/B;AAAuC,IAAA,EAAE,EAAC,kBAA1C;AAA6D,IAAA,KAAK,EAAEd,OAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGe,MAAM,CAACC,IAAP,CAAYpB,2BAAZ,EAAyCqB,GAAzC,CAA8CC,EAAD,iBAC5C,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,GAAG,EAAEA,EAApB;AAAwB,IAAA,OAAO,EAAEN,sBAAsB,CAACM,EAAD,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,EADH,CADD,CADH,CAJF,CADF,CADF;AAgBD,CA3CD;;AA6CA,eAAerB,yBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { DropdownButton, Dropdown, InputGroup } from \"react-bootstrap\";\nimport { FilterFunctionProps } from \"./filter\";\nimport { TrackWithAudioFeatures, availableTrackAudioFeatures } from \"../../models/Spotify\";\n\ninterface IProps extends FilterFunctionProps {}\n\nconst FilterOrderByAudioFeature: React.FunctionComponent<IProps> = (props: IProps) => {\n  const { outputCallback } = props;\n\n  const [feature, setFeature] = useState(\"Energy\");\n\n  useEffect(() => {\n    const audio_feature_key: keyof SpotifyApi.AudioFeaturesObject =\n      availableTrackAudioFeatures[feature].key;\n    outputCallback(\n      (tracks: TrackWithAudioFeatures[]): TrackWithAudioFeatures[] =>\n        tracks.sort((a: TrackWithAudioFeatures, b: TrackWithAudioFeatures): number => {\n          const a_audio_feature_value: number =\n            a.audio_features === undefined || a.audio_features === null\n              ? 0\n              : (a.audio_features[audio_feature_key] as number);\n          const b_audio_feature_value: number =\n            b.audio_features === undefined || b.audio_features === null\n              ? 0\n              : (b.audio_features[audio_feature_key] as number);\n          return b_audio_feature_value - a_audio_feature_value;\n        }),\n      `Order songs by ${feature}`\n    );\n  }, [feature]);\n\n  const setFeatureFromDropdown = (featureValue: string) => () => setFeature(featureValue);\n\n  return (\n    <>\n      <InputGroup className=\"mb-1 d-inline-flex w-auto\">\n        <InputGroup.Prepend>\n          <InputGroup.Text>Audio Feature</InputGroup.Text>\n        </InputGroup.Prepend>\n        <DropdownButton as={InputGroup.Append} id=\"dropdown-feature\" title={feature}>\n          {Object.keys(availableTrackAudioFeatures).map((af) => (\n            <Dropdown.Item key={af} onClick={setFeatureFromDropdown(af)}>\n              {af}\n            </Dropdown.Item>\n          ))}\n        </DropdownButton>\n      </InputGroup>\n    </>\n  );\n};\n\nexport default FilterOrderByAudioFeature;\n"]},"metadata":{},"sourceType":"module"}