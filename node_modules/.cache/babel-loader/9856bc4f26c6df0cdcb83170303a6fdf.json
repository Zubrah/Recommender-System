{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/components/ExportPlaylistInput.tsx\";\nimport React, { useState } from \"react\";\nimport cogoToast from \"cogo-toast\";\nimport { Button, Dropdown, DropdownButton, FormControl, InputGroup } from \"react-bootstrap\";\nexport const Export = props => {\n  const {\n    onExport\n  } = props;\n  const [name, setName] = useState(\"\");\n  const [makePublic, setMakePublic] = useState(false);\n  const [nameInvalid, setNameInvalid] = useState(false);\n\n  const onNameChange = e => {\n    if (e.currentTarget.value !== undefined) {\n      setName(e.currentTarget.value);\n      setNameInvalid(e.currentTarget.value === \"\");\n    }\n  };\n\n  const onMakePublicSelect = makePublic => () => setMakePublic(makePublic);\n\n  const onCreate = () => {\n    if (name === \"\") {\n      setNameInvalid(true);\n    } else {\n      onExport(name, makePublic).then(success => {\n        if (success) {\n          setName(\"\");\n          cogoToast.success(\"Playlist has been created. You can go to Spotify to see your new playlist.\", {\n            position: \"bottom-center\",\n            heading: \"Playlist Created\",\n            hideAfter: 10,\n            onClick: hide => hide()\n          });\n        } else {\n          cogoToast.error(\"Failed to create playlist. Make sure you are connected to the internet and that your token is valid.\", {\n            position: \"bottom-center\",\n            heading: \"Failed To Create Playlist\",\n            hideAfter: 10,\n            onClick: hide => hide()\n          });\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"Create New Playlist\"), /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-3 d-none d-sm-inline-flex\",\n    style: {\n      maxWidth: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n    id: \"playlist-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Playlist Name\")), /*#__PURE__*/React.createElement(FormControl, {\n    placeholder: \"Playlist Name\",\n    \"aria-label\": \"Playlist Name\",\n    \"aria-describedby\": \"playlist-name\",\n    value: name,\n    onChange: onNameChange,\n    isInvalid: nameInvalid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(DropdownButton, {\n    as: InputGroup.Append,\n    variant: \"outline-secondary\",\n    title: makePublic ? \"Public\" : \"Private\",\n    id: \"make-private\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Item, {\n    onClick: onMakePublicSelect(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, \"Private\"), /*#__PURE__*/React.createElement(Dropdown.Item, {\n    onClick: onMakePublicSelect(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, \"Public\")), /*#__PURE__*/React.createElement(InputGroup.Append, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-secondary\",\n    onClick: onCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"Create\"))), /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-3 d-inline-flex d-sm-none justify-content-center\",\n    style: {\n      maxWidth: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n    id: \"playlist-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"Playlist Name\")), /*#__PURE__*/React.createElement(FormControl, {\n    placeholder: \"Playlist Name\",\n    \"aria-label\": \"Playlist Name\",\n    \"aria-describedby\": \"playlist-name\",\n    value: name,\n    onChange: onNameChange,\n    isInvalid: nameInvalid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-3 d-inline-flex d-sm-none justify-content-center\",\n    style: {\n      maxWidth: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DropdownButton, {\n    as: InputGroup.Prepend,\n    variant: \"outline-secondary\",\n    title: makePublic ? \"Public\" : \"Private\",\n    id: \"make-private\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Item, {\n    onClick: onMakePublicSelect(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"Private\"), /*#__PURE__*/React.createElement(Dropdown.Item, {\n    onClick: onMakePublicSelect(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \"Public\")), /*#__PURE__*/React.createElement(InputGroup.Append, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-secondary\",\n    onClick: onCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, \"Create\"))));\n};\nexport default Export;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/components/ExportPlaylistInput.tsx"],"names":["React","useState","cogoToast","Button","Dropdown","DropdownButton","FormControl","InputGroup","Export","props","onExport","name","setName","makePublic","setMakePublic","nameInvalid","setNameInvalid","onNameChange","e","currentTarget","value","undefined","onMakePublicSelect","onCreate","then","success","position","heading","hideAfter","onClick","hide","error","maxWidth","Append","Prepend"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport cogoToast from \"cogo-toast\";\nimport { Button, Dropdown, DropdownButton, FormControl, InputGroup } from \"react-bootstrap\";\nimport { BsPrefixProps, ReplaceProps } from \"react-bootstrap/helpers\";\nimport { FormControlProps } from \"react-bootstrap/FormControl\";\n\ninterface IProps {\n  onExport: (name: string, makePublic: boolean) => Promise<boolean>;\n}\n\nexport const Export: React.FunctionComponent<IProps> = (props: IProps) => {\n  const { onExport } = props;\n\n  const [name, setName] = useState(\"\");\n  const [makePublic, setMakePublic] = useState(false);\n  const [nameInvalid, setNameInvalid] = useState(false);\n\n  const onNameChange = (\n    e: React.FormEvent<ReplaceProps<\"input\", BsPrefixProps<\"input\"> & FormControlProps>>\n  ) => {\n    if (e.currentTarget.value !== undefined) {\n      setName(e.currentTarget.value);\n      setNameInvalid(e.currentTarget.value === \"\");\n    }\n  };\n\n  const onMakePublicSelect = (makePublic: boolean) => () => setMakePublic(makePublic);\n\n  const onCreate = () => {\n    if (name === \"\") {\n      setNameInvalid(true);\n    } else {\n      onExport(name, makePublic).then((success) => {\n        if (success) {\n          setName(\"\");\n          cogoToast.success(\n            \"Playlist has been created. You can go to Spotify to see your new playlist.\",\n            {\n              position: \"bottom-center\",\n              heading: \"Playlist Created\",\n              hideAfter: 10,\n              onClick: (hide: any) => hide()\n            }\n          );\n        } else {\n          cogoToast.error(\n            \"Failed to create playlist. Make sure you are connected to the internet and that your token is valid.\",\n            {\n              position: \"bottom-center\",\n              heading: \"Failed To Create Playlist\",\n              hideAfter: 10,\n              onClick: (hide: any) => hide()\n            }\n          );\n        }\n      });\n    }\n  };\n\n  return (\n    <>\n      <h4 className=\"mb-2\">Create New Playlist</h4>\n      <InputGroup className=\"mb-3 d-none d-sm-inline-flex\" style={{ maxWidth: 500 }}>\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"playlist-name\">Playlist Name</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          placeholder=\"Playlist Name\"\n          aria-label=\"Playlist Name\"\n          aria-describedby=\"playlist-name\"\n          value={name}\n          onChange={onNameChange}\n          isInvalid={nameInvalid}\n        />\n        <DropdownButton\n          as={InputGroup.Append}\n          variant={\"outline-secondary\"}\n          title={makePublic ? \"Public\" : \"Private\"}\n          id=\"make-private\"\n        >\n          <Dropdown.Item onClick={onMakePublicSelect(false)}>Private</Dropdown.Item>\n          <Dropdown.Item onClick={onMakePublicSelect(true)}>Public</Dropdown.Item>\n        </DropdownButton>\n        <InputGroup.Append>\n          <Button variant={\"outline-secondary\"} onClick={onCreate}>\n            Create\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n\n      <InputGroup\n        className=\"mb-3 d-inline-flex d-sm-none justify-content-center\"\n        style={{ maxWidth: 500 }}\n      >\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"playlist-name\">Playlist Name</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          placeholder=\"Playlist Name\"\n          aria-label=\"Playlist Name\"\n          aria-describedby=\"playlist-name\"\n          value={name}\n          onChange={onNameChange}\n          isInvalid={nameInvalid}\n        />\n      </InputGroup>\n      <InputGroup\n        className=\"mb-3 d-inline-flex d-sm-none justify-content-center\"\n        style={{ maxWidth: 500 }}\n      >\n        <DropdownButton\n          as={InputGroup.Prepend}\n          variant={\"outline-secondary\"}\n          title={makePublic ? \"Public\" : \"Private\"}\n          id=\"make-private\"\n        >\n          <Dropdown.Item onClick={onMakePublicSelect(false)}>Private</Dropdown.Item>\n          <Dropdown.Item onClick={onMakePublicSelect(true)}>Public</Dropdown.Item>\n        </DropdownButton>\n        <InputGroup.Append>\n          <Button variant={\"outline-secondary\"} onClick={onCreate}>\n            Create\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </>\n  );\n};\n\nexport default Export;\n"]},"metadata":{},"sourceType":"module"}