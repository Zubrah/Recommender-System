{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Compare/RadarChartAudioFeatureComparison.tsx\";\nimport React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { availableTrackAudioFeatures } from \"../../models/Spotify\";\nimport { getSupportedTrackAudioFeaturesFromPlaylist } from \"../../logic/Spotify\";\n\nconst RadarChartAudioFeatureComparison = props => {\n  const {\n    playlists,\n    tracks\n  } = props;\n  const availableTrackAudioFeatureNames = Object.keys(availableTrackAudioFeatures).filter(af_name => availableTrackAudioFeatures[af_name].show_in_compare_radar);\n\n  const calculateTrackAverageForAudioFeatures = (playlist, audio_feature) => {\n    const avaiableAudioFeatures = getSupportedTrackAudioFeaturesFromPlaylist(playlist, tracks);\n    const audioFeatureValues = avaiableAudioFeatures.map(af => af[audio_feature]);\n    const average = audioFeatureValues.reduce((p, c) => p + c, 0) / audioFeatureValues.length;\n    return average;\n  };\n\n  return /*#__PURE__*/React.createElement(Plot, {\n    data: playlists.map(playlist => ({\n      type: \"scatterpolar\",\n      r: availableTrackAudioFeatureNames.map(af_name => calculateTrackAverageForAudioFeatures(playlist, availableTrackAudioFeatures[af_name].key)),\n      theta: availableTrackAudioFeatureNames,\n      fill: \"toself\",\n      name: playlist.name\n    })),\n    layout: {\n      hovermode: \"closest\",\n      margin: {\n        t: 20\n      },\n      autosize: true,\n      legend: {\n        orientation: \"h\"\n      }\n    },\n    useResizeHandler: true,\n    config: {\n      displayModeBar: false,\n      responsive: true\n    },\n    className: \"w-100 m-auto\",\n    style: {\n      maxWidth: 800,\n      height: 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default RadarChartAudioFeatureComparison;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Compare/RadarChartAudioFeatureComparison.tsx"],"names":["React","Plot","availableTrackAudioFeatures","getSupportedTrackAudioFeaturesFromPlaylist","RadarChartAudioFeatureComparison","props","playlists","tracks","availableTrackAudioFeatureNames","Object","keys","filter","af_name","show_in_compare_radar","calculateTrackAverageForAudioFeatures","playlist","audio_feature","avaiableAudioFeatures","audioFeatureValues","map","af","average","reduce","p","c","length","type","r","key","theta","fill","name","hovermode","margin","t","autosize","legend","orientation","displayModeBar","responsive","maxWidth","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAEEC,2BAFF,QAIO,sBAJP;AAKA,SAASC,0CAAT,QAA2D,qBAA3D;;AAOA,MAAMC,gCAAiE,GAAIC,KAAD,IAAmB;AAC3F,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAwBF,KAA9B;AAEA,QAAMG,+BAA+B,GAAGC,MAAM,CAACC,IAAP,CAAYR,2BAAZ,EAAyCS,MAAzC,CACrCC,OAAD,IAAaV,2BAA2B,CAACU,OAAD,CAA3B,CAAqCC,qBADZ,CAAxC;;AAIA,QAAMC,qCAAqC,GAAG,CAC5CC,QAD4C,EAE5CC,aAF4C,KAGjC;AACX,UAAMC,qBAAqB,GAAGd,0CAA0C,CAACY,QAAD,EAAWR,MAAX,CAAxE;AACA,UAAMW,kBAAkB,GAAGD,qBAAqB,CAACE,GAAtB,CAA2BC,EAAD,IAAQA,EAAE,CAACJ,aAAD,CAApC,CAA3B;AACA,UAAMK,OAAO,GACXH,kBAAkB,CAACI,MAAnB,CAA0B,CAACC,CAAD,EAAYC,CAAZ,KAA0BD,CAAC,GAAGC,CAAxD,EAA2D,CAA3D,IAAgEN,kBAAkB,CAACO,MADrF;AAEA,WAAOJ,OAAP;AACD,GATD;;AAWA,sBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAEf,SAAS,CAACa,GAAV,CAAeJ,QAAD,KAAe;AACjCW,MAAAA,IAAI,EAAE,cAD2B;AAEjCC,MAAAA,CAAC,EAAEnB,+BAA+B,CAACW,GAAhC,CAAqCP,OAAD,IACrCE,qCAAqC,CAACC,QAAD,EAAWb,2BAA2B,CAACU,OAAD,CAA3B,CAAqCgB,GAAhD,CADpC,CAF8B;AAKjCC,MAAAA,KAAK,EAAErB,+BAL0B;AAMjCsB,MAAAA,IAAI,EAAE,QAN2B;AAOjCC,MAAAA,IAAI,EAAEhB,QAAQ,CAACgB;AAPkB,KAAf,CAAd,CADR;AAUE,IAAA,MAAM,EAAE;AACNC,MAAAA,SAAS,EAAE,SADL;AAENC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,CAAC,EAAE;AAAL,OAFF;AAGNC,MAAAA,QAAQ,EAAE,IAHJ;AAINC,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAJF,KAVV;AAkBE,IAAA,gBAAgB,EAAE,IAlBpB;AAmBE,IAAA,MAAM,EAAE;AACNC,MAAAA,cAAc,EAAE,KADV;AAENC,MAAAA,UAAU,EAAE;AAFN,KAnBV;AAuBE,IAAA,SAAS,EAAC,cAvBZ;AAwBE,IAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,GADL;AAELC,MAAAA,MAAM,EAAE;AAFH,KAxBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA+BD,CAjDD;;AAmDA,eAAerC,gCAAf","sourcesContent":["import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport {\n  PlaylistObjectSimplifiedWithTrackIds,\n  availableTrackAudioFeatures,\n  TrackWithAudioFeatures\n} from \"../../models/Spotify\";\nimport { getSupportedTrackAudioFeaturesFromPlaylist } from \"../../logic/Spotify\";\n\ninterface IProps {\n  playlists: PlaylistObjectSimplifiedWithTrackIds[];\n  tracks: { [key: string]: TrackWithAudioFeatures };\n}\n\nconst RadarChartAudioFeatureComparison: React.FunctionComponent<IProps> = (props: IProps) => {\n  const { playlists, tracks } = props;\n\n  const availableTrackAudioFeatureNames = Object.keys(availableTrackAudioFeatures).filter(\n    (af_name) => availableTrackAudioFeatures[af_name].show_in_compare_radar\n  );\n\n  const calculateTrackAverageForAudioFeatures = (\n    playlist: PlaylistObjectSimplifiedWithTrackIds,\n    audio_feature: keyof SpotifyApi.AudioFeaturesObject\n  ): number => {\n    const avaiableAudioFeatures = getSupportedTrackAudioFeaturesFromPlaylist(playlist, tracks);\n    const audioFeatureValues = avaiableAudioFeatures.map((af) => af[audio_feature] as number);\n    const average =\n      audioFeatureValues.reduce((p: number, c: number) => p + c, 0) / audioFeatureValues.length;\n    return average;\n  };\n\n  return (\n    <Plot\n      data={playlists.map((playlist) => ({\n        type: \"scatterpolar\",\n        r: availableTrackAudioFeatureNames.map((af_name) =>\n          calculateTrackAverageForAudioFeatures(playlist, availableTrackAudioFeatures[af_name].key)\n        ),\n        theta: availableTrackAudioFeatureNames,\n        fill: \"toself\",\n        name: playlist.name\n      }))}\n      layout={{\n        hovermode: \"closest\",\n        margin: { t: 20 },\n        autosize: true,\n        legend: {\n          orientation: \"h\"\n        }\n      }}\n      useResizeHandler={true}\n      config={{\n        displayModeBar: false,\n        responsive: true\n      }}\n      className=\"w-100 m-auto\"\n      style={{\n        maxWidth: 800,\n        height: 400\n      }}\n    />\n  );\n};\n\nexport default RadarChartAudioFeatureComparison;\n"]},"metadata":{},"sourceType":"module"}