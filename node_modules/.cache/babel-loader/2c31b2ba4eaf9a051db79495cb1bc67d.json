{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/components/TokenRefreshWarning.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { navigate } from \"hookrouter\";\nimport { Button, Modal } from \"react-bootstrap\";\nconst warningMilliseconds = 5 * 60 * 1000;\n\nconst TokenRefreshWarning = props => {\n  const {\n    token\n  } = props;\n  const {\n    onLogOut\n  } = props;\n  const [open, setOpen] = useState(false);\n  useEffect(() => {\n    const timers = [];\n\n    if (token !== undefined) {\n      const milliseconds_left = token.expiry.getTime() - new Date().getTime();\n\n      if (warningMilliseconds < milliseconds_left) {\n        // If there is more than the warning time left\n        timers.push(setTimeout(() => {\n          // Setup warning\n          setOpen(true);\n        }, milliseconds_left - warningMilliseconds));\n        timers.push(setTimeout(() => {\n          // Setup token expired\n          setOpen(true);\n        }, milliseconds_left));\n      } else if (milliseconds_left > 0) {\n        // If there is time left\n        timers.push(setTimeout(() => {\n          // Setup token expired\n          setOpen(true);\n        }, milliseconds_left));\n        setOpen(true); // Show\n      } else {\n        // If there is no time left\n        setOpen(true); // Show\n      }\n    }\n\n    return () => timers.forEach(t => clearTimeout(t));\n  }, [token]);\n\n  const refreshClick = () => {\n    onLogOut();\n    navigate(\"/spotify-authorization\");\n  };\n\n  const cancelClick = () => setOpen(false);\n\n  if (token !== undefined && open) {\n    const expired = token.expiry.getTime() - new Date().getTime() <= 0;\n    return /*#__PURE__*/React.createElement(Modal, {\n      show: open,\n      onHide: cancelClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, expired ? \"Spotify Token Expired\" : \"Spotify Token Refresh Warning\")), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, expired ? /*#__PURE__*/React.createElement(React.Fragment, null, \"Your Spotify token has now expired and we can no longer access your data; sign back in with Spotify to get an new token.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }), \"We will leave you logged in here so you can still view your data but we will not be able to get data from Spotify for you.\") : /*#__PURE__*/React.createElement(React.Fragment, null, \"Since Spotify issues client side tokens for upto an hour, you will need a new token soon. Your current token expires at \", token.expiry.toLocaleTimeString(), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }), \"To do this, we'll send you back to the Spotify authorization page again to get a new token.\")), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: cancelClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      onClick: refreshClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \"Refresh Token\")));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n};\n\nexport default TokenRefreshWarning;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/components/TokenRefreshWarning.tsx"],"names":["React","useState","useEffect","navigate","Button","Modal","warningMilliseconds","TokenRefreshWarning","props","token","onLogOut","open","setOpen","timers","undefined","milliseconds_left","expiry","getTime","Date","push","setTimeout","forEach","t","clearTimeout","refreshClick","cancelClick","expired","toLocaleTimeString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { navigate } from \"hookrouter\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { Token } from \"../models/Spotify\";\n\ninterface IProps {\n  token: Token | undefined;\n  onLogOut: () => void;\n}\n\nconst warningMilliseconds = 5 * 60 * 1000;\n\nconst TokenRefreshWarning: React.FunctionComponent<IProps> = (props: IProps) => {\n  const { token } = props;\n  const { onLogOut } = props;\n\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    const timers: NodeJS.Timeout[] = [];\n    if (token !== undefined) {\n      const milliseconds_left = token.expiry.getTime() - new Date().getTime();\n      if (warningMilliseconds < milliseconds_left) {\n        // If there is more than the warning time left\n        timers.push(\n          setTimeout(() => {\n            // Setup warning\n            setOpen(true);\n          }, milliseconds_left - warningMilliseconds)\n        );\n        timers.push(\n          setTimeout(() => {\n            // Setup token expired\n            setOpen(true);\n          }, milliseconds_left)\n        );\n      } else if (milliseconds_left > 0) {\n        // If there is time left\n        timers.push(\n          setTimeout(() => {\n            // Setup token expired\n            setOpen(true);\n          }, milliseconds_left)\n        );\n        setOpen(true); // Show\n      } else {\n        // If there is no time left\n        setOpen(true); // Show\n      }\n    }\n\n    return () => timers.forEach((t) => clearTimeout(t));\n  }, [token]);\n\n  const refreshClick = () => {\n    onLogOut();\n    navigate(\"/spotify-authorization\");\n  };\n  const cancelClick = () => setOpen(false);\n\n  if (token !== undefined && open) {\n    const expired: boolean = token.expiry.getTime() - new Date().getTime() <= 0;\n\n    return (\n      <Modal show={open} onHide={cancelClick}>\n        <Modal.Header closeButton>\n          <Modal.Title>\n            {expired ? \"Spotify Token Expired\" : \"Spotify Token Refresh Warning\"}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {expired ? (\n            <>\n              Your Spotify token has now expired and we can no longer access your data; sign back in\n              with Spotify to get an new token.\n              <br />\n              We will leave you logged in here so you can still view your data but we will not be\n              able to get data from Spotify for you.\n            </>\n          ) : (\n            <>\n              Since Spotify issues client side tokens for upto an hour, you will need a new token\n              soon. Your current token expires at {token.expiry.toLocaleTimeString()}.\n              <br />\n              To do this, we'll send you back to the Spotify authorization page again to get a new\n              token.\n            </>\n          )}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={cancelClick}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={refreshClick}>\n            Refresh Token\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  } else {\n    return <></>;\n  }\n};\n\nexport default TokenRefreshWarning;\n"]},"metadata":{},"sourceType":"module"}