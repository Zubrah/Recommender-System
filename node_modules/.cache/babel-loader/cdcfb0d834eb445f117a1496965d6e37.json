{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/SpotifyAuthorization/index.tsx\";\nimport React from \"react\";\nimport { navigate } from \"hookrouter\";\nimport { Container, Spinner } from \"react-bootstrap\";\nimport { encodeData, randomString } from \"../../logic/Utils\";\nimport config from \"../../config\"; // Based off https://developer.spotify.com/documentation/general/guides/authorization-guide/#implicit-grant-flow\n\nconst localStorageStateKey = \"spotify-auth-random-state\";\nexport const localStorageRedirectKey = \"auth-local-redirect\";\n\nconst SpotifyAuthorization = props => {\n  const {\n    onTokenChange\n  } = props;\n  const {\n    hash\n  } = window.location;\n\n  const redirectOut = () => {\n    let local_redirect = localStorage.getItem(localStorageRedirectKey);\n\n    if (local_redirect === null) {\n      navigate(\"/\");\n    } else {\n      localStorage.removeItem(localStorageRedirectKey);\n      navigate(local_redirect);\n    }\n  };\n\n  const onTokenRecieved = (value, expires_in) => {\n    let expiryDate = new Date();\n    expiryDate.setSeconds(expiryDate.getSeconds() + expires_in);\n    onTokenChange({\n      value: value,\n      expiry: expiryDate\n    });\n  };\n\n  let message = /*#__PURE__*/React.createElement(React.Fragment, null);\n\n  if (hash === \"\") {\n    // No token in URL, redirect user to request for one\n    // Setup random state\n    const random_state = randomString(16);\n    localStorage.setItem(localStorageStateKey, random_state); // Redirect\n\n    const url_parameters = {\n      client_id: config.spotify.clientId,\n      response_type: \"token\",\n      redirect_uri: window.location.href,\n      state: random_state,\n      scope: config.spotify.permissionScope,\n      show_dialog: true\n    };\n    const url_parameters_encoded = encodeData(url_parameters);\n    window.location.href = \"https://accounts.spotify.com/authorize?\" + url_parameters_encoded;\n    message = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"border\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, \"Requesting token, you will be redirected to Spotify\"));\n  } else {\n    // We have recieved the token, read it from the URL\n    const params = new URLSearchParams(hash.substr(1));\n    const access_token = params.get(\"access_token\");\n    const expires_in = params.get(\"expires_in\");\n    const state = params.get(\"state\");\n\n    if (access_token !== null && expires_in !== null && state !== null) {\n      // All parameters are present\n      const stored_random_state = localStorage.getItem(localStorageStateKey);\n\n      if (stored_random_state !== null && stored_random_state === state) {\n        // Random state was set and matches\n        localStorage.removeItem(localStorageStateKey);\n        onTokenRecieved(access_token, parseInt(expires_in));\n        redirectOut();\n        message = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Spinner, {\n          animation: \"border\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"lead\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }\n        }, \"Recieved token\"));\n      } else {\n        // Token recieved but it does not match the state stored (if there was one)\n        message = /*#__PURE__*/React.createElement(\"p\", {\n          className: \"lead\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 19\n          }\n        }, \"Token not requested by this application\");\n      }\n    } else {\n      message = /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, \"Incorrect URL parameters\");\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"Spotify Authorization\"), message);\n};\n\nexport default SpotifyAuthorization;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/SpotifyAuthorization/index.tsx"],"names":["React","navigate","Container","Spinner","encodeData","randomString","config","localStorageStateKey","localStorageRedirectKey","SpotifyAuthorization","props","onTokenChange","hash","window","location","redirectOut","local_redirect","localStorage","getItem","removeItem","onTokenRecieved","value","expires_in","expiryDate","Date","setSeconds","getSeconds","expiry","message","random_state","setItem","url_parameters","client_id","spotify","clientId","response_type","redirect_uri","href","state","scope","permissionScope","show_dialog","url_parameters_encoded","params","URLSearchParams","substr","access_token","get","stored_random_state","parseInt"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { navigate } from \"hookrouter\";\nimport { Container, Spinner } from \"react-bootstrap\";\nimport { encodeData, randomString } from \"../../logic/Utils\";\nimport { Token } from \"../../models/Spotify\";\nimport config from \"../../config\";\n\n// Based off https://developer.spotify.com/documentation/general/guides/authorization-guide/#implicit-grant-flow\n\nconst localStorageStateKey = \"spotify-auth-random-state\";\nexport const localStorageRedirectKey = \"auth-local-redirect\";\n\ninterface IProps {\n  onTokenChange: (newToken: Token | undefined) => void;\n}\n\nconst SpotifyAuthorization: React.FunctionComponent<IProps> = (props: IProps) => {\n  const { onTokenChange } = props;\n  const { hash } = window.location;\n\n  const redirectOut = () => {\n    let local_redirect: string | null = localStorage.getItem(localStorageRedirectKey);\n    if (local_redirect === null) {\n      navigate(\"/\");\n    } else {\n      localStorage.removeItem(localStorageRedirectKey);\n      navigate(local_redirect);\n    }\n  };\n\n  const onTokenRecieved = (value: string, expires_in: number) => {\n    let expiryDate = new Date();\n    expiryDate.setSeconds(expiryDate.getSeconds() + expires_in);\n    onTokenChange({ value: value, expiry: expiryDate });\n  };\n\n  let message = <></>;\n\n  if (hash === \"\") {\n    // No token in URL, redirect user to request for one\n    // Setup random state\n    const random_state = randomString(16);\n    localStorage.setItem(localStorageStateKey, random_state);\n    // Redirect\n    const url_parameters = {\n      client_id: config.spotify.clientId,\n      response_type: \"token\",\n      redirect_uri: window.location.href,\n      state: random_state,\n      scope: config.spotify.permissionScope,\n      show_dialog: true\n    };\n    const url_parameters_encoded = encodeData(url_parameters);\n    window.location.href = \"https://accounts.spotify.com/authorize?\" + url_parameters_encoded;\n    message = (\n      <>\n        <Spinner animation=\"border\" />\n        <p className=\"lead\">Requesting token, you will be redirected to Spotify</p>\n      </>\n    );\n  } else {\n    // We have recieved the token, read it from the URL\n    const params = new URLSearchParams(hash.substr(1));\n    const access_token = params.get(\"access_token\");\n    const expires_in = params.get(\"expires_in\");\n    const state = params.get(\"state\");\n\n    if (access_token !== null && expires_in !== null && state !== null) {\n      // All parameters are present\n      const stored_random_state = localStorage.getItem(localStorageStateKey);\n\n      if (stored_random_state !== null && stored_random_state === state) {\n        // Random state was set and matches\n        localStorage.removeItem(localStorageStateKey);\n        onTokenRecieved(access_token, parseInt(expires_in));\n        redirectOut();\n        message = (\n          <>\n            <Spinner animation=\"border\" />\n            <p className=\"lead\">Recieved token</p>\n          </>\n        );\n      } else {\n        // Token recieved but it does not match the state stored (if there was one)\n        message = <p className=\"lead\">Token not requested by this application</p>;\n      }\n    } else {\n      message = <p className=\"lead\">Incorrect URL parameters</p>;\n    }\n  }\n\n  return (\n    <Container className=\"text-center\">\n      <h1>Spotify Authorization</h1>\n      {message}\n    </Container>\n  );\n};\n\nexport default SpotifyAuthorization;\n"]},"metadata":{},"sourceType":"module"}