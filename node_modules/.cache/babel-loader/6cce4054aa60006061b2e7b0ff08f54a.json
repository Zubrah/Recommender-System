{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Sort/index.tsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Alert, Container } from \"react-bootstrap\";\nimport { availableSortingMethods, sort } from \"../../logic/PointSorting\";\nimport { createPlaylist } from \"../../logic/Spotify\";\nimport { availableTrackAudioFeatures } from \"../../models/Spotify\";\nimport PlaylistSelection from \"../../components/PlaylistSelection\";\nimport PlaylistDetails from \"../../components/PlaylistDetails\";\nimport PlotTracks from \"./PlotTracks\";\nimport TrackTable from \"./TrackTable\";\nimport TrackSortControl from \"./TrackSortControl\";\nimport ExportPlaylistInput from \"../../components/ExportPlaylistInput\";\nimport SpotifyLoginStatusButton from \"../../components/SpotifyLoginStatusButton\";\nexport const Sort = props => {\n  const {\n    token,\n    user,\n    playlists,\n    tracks,\n    playlistsLoading\n  } = props;\n  const {\n    refreshPlaylist,\n    refreshUsersPlaylists\n  } = props;\n  const [selectedPlaylistIds, setSelectedPlaylistIds] = useState([]);\n  const [selectedAxis, setSelectedAxis] = useState({\n    x: \"Valence\",\n    y: \"Energy\"\n  });\n  const [sortingMethod, setSortingMethod] = useState(\"Distance From Origin\");\n  const [sortedTrackIds, setSortedTrackIds] = useState([]);\n  const [firstPlaylistSelection, setFirstPlaylistSelection] = useState(true);\n  const playlistDetailsWrapperNode = useRef(null);\n\n  const onPlaylistSelectionChange = (playlist_ids, scrollOnFirstSelection = false) => {\n    setSelectedPlaylistIds(playlist_ids);\n    playlist_ids.forEach(playlist_id => {\n      if (playlists[playlist_id].track_ids.length === 0) {\n        refreshPlaylist(playlists[playlist_id]);\n      }\n    }); // Scroll on first selection\n\n    if (scrollOnFirstSelection && firstPlaylistSelection) {\n      setTimeout(() => {\n        if (playlistDetailsWrapperNode.current !== null) {\n          window.scroll({\n            top: playlistDetailsWrapperNode.current.getBoundingClientRect().top + window.scrollY - 50,\n            behavior: \"smooth\"\n          });\n        }\n      }, 300); // Wait for elements below to appear\n    }\n\n    setFirstPlaylistSelection(false);\n  };\n\n  const onXAxisSelect = selection => setSelectedAxis({ ...selectedAxis,\n    x: selection\n  });\n\n  const onYAxisSelect = selection => setSelectedAxis({ ...selectedAxis,\n    y: selection\n  });\n\n  const onSortMethodSelect = selection => setSortingMethod(selection);\n\n  useEffect(() => {\n    if (selectedPlaylistIds.length > 0) {\n      const selected_playlist_track_ids = selectedPlaylistIds.map(pid => pid in playlists ? playlists[pid].track_ids : []).flat();\n      const selected_playlist_tracks = Object.values(tracks).filter(t => selected_playlist_track_ids.indexOf(t.id) !== -1).sort((a, b) => {\n        // Do a sort to put them in the correct order again (fixes incorrect order due to overlapping playlists)\n        const aIndex = selected_playlist_track_ids.indexOf(a.id);\n        const bIndex = selected_playlist_track_ids.indexOf(b.id);\n        return aIndex === bIndex ? 0 : aIndex > bIndex ? 1 : -1;\n      });\n      setSortedTrackIds(sort(selected_playlist_tracks, availableTrackAudioFeatures[selectedAxis.x].key, availableTrackAudioFeatures[selectedAxis.y].key, availableSortingMethods[sortingMethod]));\n    } else {\n      setSortedTrackIds([]);\n    }\n  }, [selectedPlaylistIds, selectedAxis, sortingMethod, playlists, tracks]);\n  const sortedTrackIdsThatExist = sortedTrackIds.filter(t => tracks[t.id] !== undefined); // Need to check if the tracks currently exist (some of these track id's don't match to tracks when selecting different playlists quickly)\n\n  const sorted_tracks = sortedTrackIdsThatExist.map(t => tracks[t.id]);\n  const sorted_tracks_with_indexes = sortedTrackIdsThatExist.map(it => {\n    return { ...tracks[it.id],\n      ...it\n    };\n  });\n\n  const onExport = (name, isPublic) => {\n    return new Promise(async (resolve, reject) => {\n      if (token !== undefined && sortedTrackIds !== undefined && user !== undefined) {\n        // Map the sorted tracks to uris\n        let track_uris = sortedTrackIds.map(st => tracks[st.id].uri); // Create the playlist\n\n        let success = await createPlaylist(token.value, user, name, isPublic, track_uris).then(playlist => {\n          refreshUsersPlaylists(false); // Get the new playlist by refreshing the playlist list (keep current track ids to not loose plot data)\n\n          return true;\n        }, err => {\n          console.error(err);\n          return false;\n        });\n        resolve(success);\n      }\n\n      resolve(false);\n    });\n  };\n\n  const header = /*#__PURE__*/React.createElement(Container, {\n    className: \"mt-3 mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, \"Playlist Sorting\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-center lead col-md-7 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, \"Here you can select a playlist and look at how the new playlist is sorted. You can then create the new playlist or select a different playlist.\"));\n\n  if (token === undefined) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, header, /*#__PURE__*/React.createElement(Container, {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }, \"Sign into Spotify\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, \"To get access to your playlists and the ability to create playlists, you need to sign into Spotify.\"), /*#__PURE__*/React.createElement(SpotifyLoginStatusButton, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, header, /*#__PURE__*/React.createElement(Container, {\n    className: \"text-center mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, \"Select a Playlist\"), /*#__PURE__*/React.createElement(PlaylistSelection, {\n    playlists: Object.values(playlists),\n    selectedPlaylistIds: selectedPlaylistIds,\n    selectionsAllowed: \"All\",\n    defaultSelectionType: \"Single\",\n    onPlaylistSelectionChange: onPlaylistSelectionChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }), selectedPlaylistIds.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-4\",\n    ref: playlistDetailsWrapperNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PlaylistDetails, {\n    playlists: selectedPlaylistIds.map(pid => pid in playlists ? playlists[pid] : null).filter(p => p !== null),\n    tracksLoading: selectedPlaylistIds.map(pid => playlistsLoading.has(pid)).reduce((a, b) => a || b),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PlotTracks, {\n    tracks: sorted_tracks,\n    x_audio_feature_name: selectedAxis.x,\n    y_audio_feature_name: selectedAxis.y,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TrackSortControl, {\n    available_audio_features: Object.keys(availableTrackAudioFeatures).filter(audio_feature_name => availableTrackAudioFeatures[audio_feature_name].show_in_sort),\n    available_track_sorting_methods: Object.keys(availableSortingMethods),\n    selected_x_axis: selectedAxis.x,\n    selected_y_axis: selectedAxis.y,\n    selected_sorting_method: sortingMethod,\n    onXAxisSelect: onXAxisSelect,\n    onYAxisSelect: onYAxisSelect,\n    onSortMethodSelect: onSortMethodSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  })), selectedPlaylistIds.map(pid => pid in playlists ? playlists[pid].track_ids.length : 0).reduce((a, b) => a + b) > 0 && selectedPlaylistIds.map(pid => pid in playlists ? playlists[pid].tracks.total : 0).reduce((a, b) => a + b) !== sortedTrackIds.length && /*#__PURE__*/React.createElement(Alert, {\n    variant: \"warning\",\n    className: \"d-inline-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }\n  }, \"Warning: Duplicate songs will be removed in the new playlist\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TrackTable, {\n    tracks: sorted_tracks_with_indexes,\n    x_audio_feature: availableTrackAudioFeatures[selectedAxis.x].key,\n    x_audio_feature_name: selectedAxis.x,\n    y_audio_feature: availableTrackAudioFeatures[selectedAxis.y].key,\n    y_audio_feature_name: selectedAxis.y,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ExportPlaylistInput, {\n    onExport: onExport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  })))));\n};\nexport default Sort;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Sort/index.tsx"],"names":["React","useState","useEffect","useRef","Alert","Container","availableSortingMethods","sort","createPlaylist","availableTrackAudioFeatures","PlaylistSelection","PlaylistDetails","PlotTracks","TrackTable","TrackSortControl","ExportPlaylistInput","SpotifyLoginStatusButton","Sort","props","token","user","playlists","tracks","playlistsLoading","refreshPlaylist","refreshUsersPlaylists","selectedPlaylistIds","setSelectedPlaylistIds","selectedAxis","setSelectedAxis","x","y","sortingMethod","setSortingMethod","sortedTrackIds","setSortedTrackIds","firstPlaylistSelection","setFirstPlaylistSelection","playlistDetailsWrapperNode","onPlaylistSelectionChange","playlist_ids","scrollOnFirstSelection","forEach","playlist_id","track_ids","length","setTimeout","current","window","scroll","top","getBoundingClientRect","scrollY","behavior","onXAxisSelect","selection","onYAxisSelect","onSortMethodSelect","selected_playlist_track_ids","map","pid","flat","selected_playlist_tracks","Object","values","filter","t","indexOf","id","a","b","aIndex","bIndex","key","sortedTrackIdsThatExist","undefined","sorted_tracks","sorted_tracks_with_indexes","it","onExport","name","isPublic","Promise","resolve","reject","track_uris","st","uri","success","value","then","playlist","err","console","error","header","p","has","reduce","keys","audio_feature_name","show_in_sort","total"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,iBAAjC;AACA,SACEC,uBADF,EAGEC,IAHF,QAKO,0BALP;AAMA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAEEC,2BAFF,QAIO,sBAJP;AAMA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,mBAAP,MAAgC,sCAAhC;AACA,OAAOC,wBAAP,MAAqC,2CAArC;AAiBA,OAAO,MAAMC,IAAqC,GAAIC,KAAD,IAAmB;AACtE,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA;AAAlC,MAAuDL,KAA7D;AACA,QAAM;AAAEM,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAA6CP,KAAnD;AAEA,QAAM,CAACQ,mBAAD,EAAsBC,sBAAtB,IAAgD1B,QAAQ,CAAW,EAAX,CAA9D;AACA,QAAM,CAAC2B,YAAD,EAAeC,eAAf,IAAkC5B,QAAQ,CAAe;AAAE6B,IAAAA,CAAC,EAAE,SAAL;AAAgBC,IAAAA,CAAC,EAAE;AAAnB,GAAf,CAAhD;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoChC,QAAQ,CAAS,sBAAT,CAAlD;AACA,QAAM,CAACiC,cAAD,EAAiBC,iBAAjB,IAAsClC,QAAQ,CAAmB,EAAnB,CAApD;AACA,QAAM,CAACmC,sBAAD,EAAyBC,yBAAzB,IAAsDpC,QAAQ,CAAC,IAAD,CAApE;AACA,QAAMqC,0BAA0B,GAAGnC,MAAM,CAA4B,IAA5B,CAAzC;;AAEA,QAAMoC,yBAAyB,GAAG,CAChCC,YADgC,EAEhCC,sBAA+B,GAAG,KAFF,KAG7B;AACHd,IAAAA,sBAAsB,CAACa,YAAD,CAAtB;AACAA,IAAAA,YAAY,CAACE,OAAb,CAAsBC,WAAD,IAAiB;AACpC,UAAItB,SAAS,CAACsB,WAAD,CAAT,CAAuBC,SAAvB,CAAiCC,MAAjC,KAA4C,CAAhD,EAAmD;AACjDrB,QAAAA,eAAe,CAACH,SAAS,CAACsB,WAAD,CAAV,CAAf;AACD;AACF,KAJD,EAFG,CAOH;;AACA,QAAIF,sBAAsB,IAAIL,sBAA9B,EAAsD;AACpDU,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIR,0BAA0B,CAACS,OAA3B,KAAuC,IAA3C,EAAiD;AAC/CC,UAAAA,MAAM,CAACC,MAAP,CAAc;AACZC,YAAAA,GAAG,EACDZ,0BAA0B,CAACS,OAA3B,CAAmCI,qBAAnC,GAA2DD,GAA3D,GAAiEF,MAAM,CAACI,OAAxE,GAAkF,EAFxE;AAGZC,YAAAA,QAAQ,EAAE;AAHE,WAAd;AAKD;AACF,OARS,EAQP,GARO,CAAV,CADoD,CAS3C;AACV;;AACDhB,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,GAvBD;;AAwBA,QAAMiB,aAAa,GAAIC,SAAD,IAAuB1B,eAAe,CAAC,EAAE,GAAGD,YAAL;AAAmBE,IAAAA,CAAC,EAAEyB;AAAtB,GAAD,CAA5D;;AACA,QAAMC,aAAa,GAAID,SAAD,IAAuB1B,eAAe,CAAC,EAAE,GAAGD,YAAL;AAAmBG,IAAAA,CAAC,EAAEwB;AAAtB,GAAD,CAA5D;;AACA,QAAME,kBAAkB,GAAIF,SAAD,IAAuBtB,gBAAgB,CAACsB,SAAD,CAAlE;;AAEArD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwB,mBAAmB,CAACmB,MAApB,GAA6B,CAAjC,EAAoC;AAClC,YAAMa,2BAAqC,GAAGhC,mBAAmB,CAC9DiC,GAD2C,CACtCC,GAAD,IAAUA,GAAG,IAAIvC,SAAP,GAAmBA,SAAS,CAACuC,GAAD,CAAT,CAAehB,SAAlC,GAA8C,EADjB,EAE3CiB,IAF2C,EAA9C;AAGA,YAAMC,wBAAkD,GAAGC,MAAM,CAACC,MAAP,CAAc1C,MAAd,EACxD2C,MADwD,CAChDC,CAAD,IAAOR,2BAA2B,CAACS,OAA5B,CAAoCD,CAAC,CAACE,EAAtC,MAA8C,CAAC,CADL,EAExD7D,IAFwD,CAEnD,CAAC8D,CAAD,EAA4BC,CAA5B,KAAkE;AACtE;AACA,cAAMC,MAAM,GAAGb,2BAA2B,CAACS,OAA5B,CAAoCE,CAAC,CAACD,EAAtC,CAAf;AACA,cAAMI,MAAM,GAAGd,2BAA2B,CAACS,OAA5B,CAAoCG,CAAC,CAACF,EAAtC,CAAf;AACA,eAAOG,MAAM,KAAKC,MAAX,GAAoB,CAApB,GAAwBD,MAAM,GAAGC,MAAT,GAAkB,CAAlB,GAAsB,CAAC,CAAtD;AACD,OAPwD,CAA3D;AAQArC,MAAAA,iBAAiB,CACf5B,IAAI,CACFuD,wBADE,EAEFrD,2BAA2B,CAACmB,YAAY,CAACE,CAAd,CAA3B,CAA4C2C,GAF1C,EAGFhE,2BAA2B,CAACmB,YAAY,CAACG,CAAd,CAA3B,CAA4C0C,GAH1C,EAIFnE,uBAAuB,CAAC0B,aAAD,CAJrB,CADW,CAAjB;AAQD,KApBD,MAoBO;AACLG,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD;AACF,GAxBQ,EAwBN,CAACT,mBAAD,EAAsBE,YAAtB,EAAoCI,aAApC,EAAmDX,SAAnD,EAA8DC,MAA9D,CAxBM,CAAT;AA0BA,QAAMoD,uBAAuB,GAAGxC,cAAc,CAAC+B,MAAf,CAAuBC,CAAD,IAAO5C,MAAM,CAAC4C,CAAC,CAACE,EAAH,CAAN,KAAiBO,SAA9C,CAAhC,CAjEsE,CAiEoB;;AAC1F,QAAMC,aAAuC,GAAGF,uBAAuB,CAACf,GAAxB,CAA6BO,CAAD,IAAO5C,MAAM,CAAC4C,CAAC,CAACE,EAAH,CAAzC,CAAhD;AACA,QAAMS,0BAAqD,GAAGH,uBAAuB,CAACf,GAAxB,CAC3DmB,EAAD,IAAQ;AACN,WAAO,EAAE,GAAGxD,MAAM,CAACwD,EAAE,CAACV,EAAJ,CAAX;AAAoB,SAAGU;AAAvB,KAAP;AACD,GAH2D,CAA9D;;AAMA,QAAMC,QAAQ,GAAG,CAACC,IAAD,EAAeC,QAAf,KAAuD;AACtE,WAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,UAAIjE,KAAK,KAAKwD,SAAV,IAAuBzC,cAAc,KAAKyC,SAA1C,IAAuDvD,IAAI,KAAKuD,SAApE,EAA+E;AAC7E;AACA,YAAIU,UAAoB,GAAGnD,cAAc,CAACyB,GAAf,CAAoB2B,EAAD,IAAQhE,MAAM,CAACgE,EAAE,CAAClB,EAAJ,CAAN,CAAcmB,GAAzC,CAA3B,CAF6E,CAG7E;;AACA,YAAIC,OAAgB,GAAG,MAAMhF,cAAc,CACzCW,KAAK,CAACsE,KADmC,EAEzCrE,IAFyC,EAGzC4D,IAHyC,EAIzCC,QAJyC,EAKzCI,UALyC,CAAd,CAM3BK,IAN2B,CAO1BC,QAAD,IAAc;AACZlE,UAAAA,qBAAqB,CAAC,KAAD,CAArB,CADY,CACkB;;AAC9B,iBAAO,IAAP;AACD,SAV0B,EAW1BmE,GAAD,IAAS;AACPC,UAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,iBAAO,KAAP;AACD,SAd0B,CAA7B;AAgBAT,QAAAA,OAAO,CAACK,OAAD,CAAP;AACD;;AACDL,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAxBM,CAAP;AAyBD,GA1BD;;AA4BA,QAAMY,MAAM,gBACV,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAG,IAAA,SAAS,EAAC,mCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uJAFF,CADF;;AAUA,MAAI5E,KAAK,KAAKwD,SAAd,EAAyB;AACvB,wBACE,0CACGoB,MADH,eAEE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GAFF,eAME,oBAAC,wBAAD;AAA0B,MAAA,IAAI,EAAE3E,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CAFF,CADF;AAaD;;AAED,sBACE,0CACG2E,MADH,eAEE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE,oBAAC,iBAAD;AACE,IAAA,SAAS,EAAEhC,MAAM,CAACC,MAAP,CAAc3C,SAAd,CADb;AAEE,IAAA,mBAAmB,EAAEK,mBAFvB;AAGE,IAAA,iBAAiB,EAAC,KAHpB;AAIE,IAAA,oBAAoB,EAAC,QAJvB;AAKE,IAAA,yBAAyB,EAAEa,yBAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAUGb,mBAAmB,CAACmB,MAApB,GAA6B,CAA7B,iBACC,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,GAAG,EAAEP,0BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AACE,IAAA,SAAS,EAAEZ,mBAAmB,CAC3BiC,GADQ,CACHC,GAAD,IAAUA,GAAG,IAAIvC,SAAP,GAAmBA,SAAS,CAACuC,GAAD,CAA5B,GAAoC,IAD1C,EAERK,MAFQ,CAIL+B,CADF,IAEgDA,CAAC,KAAK,IAL/C,CADb;AAQE,IAAA,aAAa,EAAEtE,mBAAmB,CAC/BiC,GADY,CACPC,GAAD,IAASrC,gBAAgB,CAAC0E,GAAjB,CAAqBrC,GAArB,CADD,EAEZsC,MAFY,CAEL,CAAC7B,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIC,CAFV,CARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,eAkBE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,MAAM,EAAEM,aADV;AAEE,IAAA,oBAAoB,EAAEhD,YAAY,CAACE,CAFrC;AAGE,IAAA,oBAAoB,EAAEF,YAAY,CAACG,CAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAlBF,eA0BE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,wBAAwB,EAAEgC,MAAM,CAACoC,IAAP,CAAY1F,2BAAZ,EAAyCwD,MAAzC,CACvBmC,kBAAD,IACE3F,2BAA2B,CAAC2F,kBAAD,CAA3B,CAAgDC,YAF1B,CAD5B;AAKE,IAAA,+BAA+B,EAAEtC,MAAM,CAACoC,IAAP,CAAY7F,uBAAZ,CALnC;AAME,IAAA,eAAe,EAAEsB,YAAY,CAACE,CANhC;AAOE,IAAA,eAAe,EAAEF,YAAY,CAACG,CAPhC;AAQE,IAAA,uBAAuB,EAAEC,aAR3B;AASE,IAAA,aAAa,EAAEsB,aATjB;AAUE,IAAA,aAAa,EAAEE,aAVjB;AAWE,IAAA,kBAAkB,EAAEC,kBAXtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA1BF,EA0CG/B,mBAAmB,CACjBiC,GADF,CACOC,GAAD,IAAUA,GAAG,IAAIvC,SAAP,GAAmBA,SAAS,CAACuC,GAAD,CAAT,CAAehB,SAAf,CAAyBC,MAA5C,GAAqD,CADrE,EAEEqD,MAFF,CAES,CAAC7B,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAFvB,IAE4B,CAF5B,IAGC5C,mBAAmB,CAChBiC,GADH,CACQC,GAAD,IAAUA,GAAG,IAAIvC,SAAP,GAAmBA,SAAS,CAACuC,GAAD,CAAT,CAAetC,MAAf,CAAsBgF,KAAzC,GAAiD,CADlE,EAEGJ,MAFH,CAEU,CAAC7B,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAFxB,MAE+BpC,cAAc,CAACW,MAL/C,iBAMG,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,SAAf;AAAyB,IAAA,SAAS,EAAC,gBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAhDN,eAqDE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,MAAM,EAAEgC,0BADV;AAEE,IAAA,eAAe,EAAEpE,2BAA2B,CAACmB,YAAY,CAACE,CAAd,CAA3B,CAA4C2C,GAF/D;AAGE,IAAA,oBAAoB,EAAE7C,YAAY,CAACE,CAHrC;AAIE,IAAA,eAAe,EAAErB,2BAA2B,CAACmB,YAAY,CAACG,CAAd,CAA3B,CAA4C0C,GAJ/D;AAKE,IAAA,oBAAoB,EAAE7C,YAAY,CAACG,CALrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CArDF,eA+DE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,mBAAD;AAAqB,IAAA,QAAQ,EAAEgD,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA/DF,CAXJ,CAFF,CADF;AAqFD,CApNM;AAsNP,eAAe9D,IAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Alert, Container } from \"react-bootstrap\";\nimport {\n  availableSortingMethods,\n  IndexedTrackId,\n  sort,\n  SpotifyTrackWithIndexes\n} from \"../../logic/PointSorting\";\nimport { createPlaylist } from \"../../logic/Spotify\";\nimport {\n  PlaylistObjectSimplifiedWithTrackIds,\n  availableTrackAudioFeatures,\n  TrackWithAudioFeatures\n} from \"../../models/Spotify\";\nimport { Token } from \"../../models/Spotify\";\nimport PlaylistSelection from \"../../components/PlaylistSelection\";\nimport PlaylistDetails from \"../../components/PlaylistDetails\";\nimport PlotTracks from \"./PlotTracks\";\nimport TrackTable from \"./TrackTable\";\nimport TrackSortControl from \"./TrackSortControl\";\nimport ExportPlaylistInput from \"../../components/ExportPlaylistInput\";\nimport SpotifyLoginStatusButton from \"../../components/SpotifyLoginStatusButton\";\n\ninterface IProps {\n  token: Token | undefined;\n  user: SpotifyApi.UserObjectPrivate | undefined;\n  playlists: { [key: string]: PlaylistObjectSimplifiedWithTrackIds };\n  tracks: { [key: string]: TrackWithAudioFeatures };\n  playlistsLoading: Set<string>;\n  refreshPlaylist: (playlist: SpotifyApi.PlaylistObjectSimplified) => void;\n  refreshUsersPlaylists: (hard: boolean) => void;\n}\n\ninterface selectedAxis {\n  x: string;\n  y: string;\n}\n\nexport const Sort: React.FunctionComponent<IProps> = (props: IProps) => {\n  const { token, user, playlists, tracks, playlistsLoading } = props;\n  const { refreshPlaylist, refreshUsersPlaylists } = props;\n\n  const [selectedPlaylistIds, setSelectedPlaylistIds] = useState<string[]>([]);\n  const [selectedAxis, setSelectedAxis] = useState<selectedAxis>({ x: \"Valence\", y: \"Energy\" });\n  const [sortingMethod, setSortingMethod] = useState<string>(\"Distance From Origin\");\n  const [sortedTrackIds, setSortedTrackIds] = useState<IndexedTrackId[]>([]);\n  const [firstPlaylistSelection, setFirstPlaylistSelection] = useState(true);\n  const playlistDetailsWrapperNode = useRef<HTMLHeadingElement | null>(null);\n\n  const onPlaylistSelectionChange = (\n    playlist_ids: string[],\n    scrollOnFirstSelection: boolean = false\n  ) => {\n    setSelectedPlaylistIds(playlist_ids);\n    playlist_ids.forEach((playlist_id) => {\n      if (playlists[playlist_id].track_ids.length === 0) {\n        refreshPlaylist(playlists[playlist_id]);\n      }\n    });\n    // Scroll on first selection\n    if (scrollOnFirstSelection && firstPlaylistSelection) {\n      setTimeout(() => {\n        if (playlistDetailsWrapperNode.current !== null) {\n          window.scroll({\n            top:\n              playlistDetailsWrapperNode.current.getBoundingClientRect().top + window.scrollY - 50,\n            behavior: \"smooth\"\n          });\n        }\n      }, 300); // Wait for elements below to appear\n    }\n    setFirstPlaylistSelection(false);\n  };\n  const onXAxisSelect = (selection: string) => setSelectedAxis({ ...selectedAxis, x: selection });\n  const onYAxisSelect = (selection: string) => setSelectedAxis({ ...selectedAxis, y: selection });\n  const onSortMethodSelect = (selection: string) => setSortingMethod(selection);\n\n  useEffect(() => {\n    if (selectedPlaylistIds.length > 0) {\n      const selected_playlist_track_ids: string[] = selectedPlaylistIds\n        .map((pid) => (pid in playlists ? playlists[pid].track_ids : []))\n        .flat();\n      const selected_playlist_tracks: TrackWithAudioFeatures[] = Object.values(tracks)\n        .filter((t) => selected_playlist_track_ids.indexOf(t.id) !== -1)\n        .sort((a: TrackWithAudioFeatures, b: TrackWithAudioFeatures): number => {\n          // Do a sort to put them in the correct order again (fixes incorrect order due to overlapping playlists)\n          const aIndex = selected_playlist_track_ids.indexOf(a.id);\n          const bIndex = selected_playlist_track_ids.indexOf(b.id);\n          return aIndex === bIndex ? 0 : aIndex > bIndex ? 1 : -1;\n        });\n      setSortedTrackIds(\n        sort(\n          selected_playlist_tracks,\n          availableTrackAudioFeatures[selectedAxis.x].key,\n          availableTrackAudioFeatures[selectedAxis.y].key,\n          availableSortingMethods[sortingMethod]\n        )\n      );\n    } else {\n      setSortedTrackIds([]);\n    }\n  }, [selectedPlaylistIds, selectedAxis, sortingMethod, playlists, tracks]);\n\n  const sortedTrackIdsThatExist = sortedTrackIds.filter((t) => tracks[t.id] !== undefined); // Need to check if the tracks currently exist (some of these track id's don't match to tracks when selecting different playlists quickly)\n  const sorted_tracks: TrackWithAudioFeatures[] = sortedTrackIdsThatExist.map((t) => tracks[t.id]);\n  const sorted_tracks_with_indexes: SpotifyTrackWithIndexes[] = sortedTrackIdsThatExist.map(\n    (it) => {\n      return { ...tracks[it.id], ...it };\n    }\n  );\n\n  const onExport = (name: string, isPublic: boolean): Promise<boolean> => {\n    return new Promise(async (resolve, reject) => {\n      if (token !== undefined && sortedTrackIds !== undefined && user !== undefined) {\n        // Map the sorted tracks to uris\n        let track_uris: string[] = sortedTrackIds.map((st) => tracks[st.id].uri);\n        // Create the playlist\n        let success: boolean = await createPlaylist(\n          token.value,\n          user,\n          name,\n          isPublic,\n          track_uris\n        ).then(\n          (playlist) => {\n            refreshUsersPlaylists(false); // Get the new playlist by refreshing the playlist list (keep current track ids to not loose plot data)\n            return true;\n          },\n          (err) => {\n            console.error(err);\n            return false;\n          }\n        );\n        resolve(success);\n      }\n      resolve(false);\n    });\n  };\n\n  const header = (\n    <Container className=\"mt-3 mb-4\">\n      <h1 className=\"text-center\">Playlist Sorting</h1>\n      <p className=\"text-center lead col-md-7 mx-auto\">\n        Here you can select a playlist and look at how the new playlist is sorted. You can then\n        create the new playlist or select a different playlist.\n      </p>\n    </Container>\n  );\n\n  if (token === undefined) {\n    return (\n      <>\n        {header}\n        <Container className=\"text-center\">\n          <h2>Sign into Spotify</h2>\n          <p>\n            To get access to your playlists and the ability to create playlists, you need to sign\n            into Spotify.\n          </p>\n          <SpotifyLoginStatusButton user={user} />\n        </Container>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {header}\n      <Container className=\"text-center mb-5\">\n        <h3 className=\"mb-3\">Select a Playlist</h3>\n        <PlaylistSelection\n          playlists={Object.values(playlists)}\n          selectedPlaylistIds={selectedPlaylistIds}\n          selectionsAllowed=\"All\"\n          defaultSelectionType=\"Single\"\n          onPlaylistSelectionChange={onPlaylistSelectionChange}\n        />\n\n        {selectedPlaylistIds.length > 0 && (\n          <>\n            <hr />\n\n            <div className=\"mb-4\" ref={playlistDetailsWrapperNode}>\n              <PlaylistDetails\n                playlists={selectedPlaylistIds\n                  .map((pid) => (pid in playlists ? playlists[pid] : null))\n                  .filter(\n                    (\n                      p: PlaylistObjectSimplifiedWithTrackIds | null\n                    ): p is PlaylistObjectSimplifiedWithTrackIds => p !== null\n                  )}\n                tracksLoading={selectedPlaylistIds\n                  .map((pid) => playlistsLoading.has(pid))\n                  .reduce((a, b) => a || b)}\n              />\n            </div>\n\n            <div className=\"mb-3\">\n              <PlotTracks\n                tracks={sorted_tracks}\n                x_audio_feature_name={selectedAxis.x}\n                y_audio_feature_name={selectedAxis.y}\n              />\n            </div>\n\n            <div className=\"mb-3\">\n              <TrackSortControl\n                available_audio_features={Object.keys(availableTrackAudioFeatures).filter(\n                  (audio_feature_name) =>\n                    availableTrackAudioFeatures[audio_feature_name].show_in_sort\n                )}\n                available_track_sorting_methods={Object.keys(availableSortingMethods)}\n                selected_x_axis={selectedAxis.x}\n                selected_y_axis={selectedAxis.y}\n                selected_sorting_method={sortingMethod}\n                onXAxisSelect={onXAxisSelect}\n                onYAxisSelect={onYAxisSelect}\n                onSortMethodSelect={onSortMethodSelect}\n              />\n            </div>\n\n            {selectedPlaylistIds\n              .map((pid) => (pid in playlists ? playlists[pid].track_ids.length : 0))\n              .reduce((a, b) => a + b) > 0 &&\n              selectedPlaylistIds\n                .map((pid) => (pid in playlists ? playlists[pid].tracks.total : 0))\n                .reduce((a, b) => a + b) !== sortedTrackIds.length && (\n                <Alert variant=\"warning\" className=\"d-inline-block\">\n                  Warning: Duplicate songs will be removed in the new playlist\n                </Alert>\n              )}\n\n            <div className=\"mb-5\">\n              <TrackTable\n                tracks={sorted_tracks_with_indexes}\n                x_audio_feature={availableTrackAudioFeatures[selectedAxis.x].key}\n                x_audio_feature_name={selectedAxis.x}\n                y_audio_feature={availableTrackAudioFeatures[selectedAxis.y].key}\n                y_audio_feature_name={selectedAxis.y}\n              />\n            </div>\n\n            <div className=\"mb-5\">\n              <ExportPlaylistInput onExport={onExport} />\n            </div>\n          </>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default Sort;\n"]},"metadata":{},"sourceType":"module"}