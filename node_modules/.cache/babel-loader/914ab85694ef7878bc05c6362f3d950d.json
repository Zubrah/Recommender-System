{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Tools/FilterAddPlaylists.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport PlaylistSelection from \"../../components/PlaylistSelection\";\n\nconst FilterAddPlaylists = props => {\n  const {\n    playlists,\n    tracks,\n    playlistsLoading,\n    refreshPlaylist,\n    outputCallback\n  } = props;\n  const [selectedPlaylistIds, setSelectedPlaylistIds] = useState([]);\n  useEffect(() => {\n    // Pass up new function on change\n    const selectedPlaylistTracks = selectedPlaylistIds.map(pid => playlists[pid].track_ids).map(tids => tids.map(tid => tracks[tid])).flat();\n    outputCallback(tracks => [...tracks, ...selectedPlaylistTracks], `${selectedPlaylistIds.length} Playlist${selectedPlaylistIds.length !== 1 ? \"s\" : \"\"} Selected`);\n  }, [selectedPlaylistIds, playlists, tracks]);\n\n  const onPlaylistSelectionChange = playlist_ids => {\n    setSelectedPlaylistIds(playlist_ids);\n    playlist_ids.forEach(playlist_id => {\n      if (playlists[playlist_id].track_ids.length === 0) {\n        refreshPlaylist(playlists[playlist_id]);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PlaylistSelection, {\n    playlists: Object.values(playlists),\n    selectedPlaylistIds: selectedPlaylistIds,\n    selectionsAllowed: \"All\",\n    defaultSelectionType: \"Single\",\n    onPlaylistSelectionChange: onPlaylistSelectionChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), playlistsLoading.size > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-3 d-flex align-items-center justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Loading tracks for selected playlists\")));\n};\n\nexport default FilterAddPlaylists;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Tools/FilterAddPlaylists.tsx"],"names":["React","useState","useEffect","Spinner","PlaylistSelection","FilterAddPlaylists","props","playlists","tracks","playlistsLoading","refreshPlaylist","outputCallback","selectedPlaylistIds","setSelectedPlaylistIds","selectedPlaylistTracks","map","pid","track_ids","tids","tid","flat","length","onPlaylistSelectionChange","playlist_ids","forEach","playlist_id","Object","values","size"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;;AAWA,MAAMC,kBAAmD,GAAIC,KAAD,IAAmB;AAC7E,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA,gBAArB;AAAuCC,IAAAA,eAAvC;AAAwDC,IAAAA;AAAxD,MAA2EL,KAAjF;AAEA,QAAM,CAACM,mBAAD,EAAsBC,sBAAtB,IAAgDZ,QAAQ,CAAW,EAAX,CAA9D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMY,sBAAgD,GAAGF,mBAAmB,CACzEG,GADsD,CACjDC,GAAD,IAAST,SAAS,CAACS,GAAD,CAAT,CAAeC,SAD0B,EAEtDF,GAFsD,CAEjDG,IAAD,IAAUA,IAAI,CAACH,GAAL,CAAUI,GAAD,IAASX,MAAM,CAACW,GAAD,CAAxB,CAFwC,EAGtDC,IAHsD,EAAzD;AAIAT,IAAAA,cAAc,CACXH,MAAD,IAAgE,CAC9D,GAAGA,MAD2D,EAE9D,GAAGM,sBAF2D,CADpD,EAKX,GAAEF,mBAAmB,CAACS,MAAO,YAC5BT,mBAAmB,CAACS,MAApB,KAA+B,CAA/B,GAAmC,GAAnC,GAAyC,EAC1C,WAPW,CAAd;AASD,GAfQ,EAeN,CAACT,mBAAD,EAAsBL,SAAtB,EAAiCC,MAAjC,CAfM,CAAT;;AAiBA,QAAMc,yBAAyB,GAAIC,YAAD,IAA4B;AAC5DV,IAAAA,sBAAsB,CAACU,YAAD,CAAtB;AACAA,IAAAA,YAAY,CAACC,OAAb,CAAsBC,WAAD,IAAiB;AACpC,UAAIlB,SAAS,CAACkB,WAAD,CAAT,CAAuBR,SAAvB,CAAiCI,MAAjC,KAA4C,CAAhD,EAAmD;AACjDX,QAAAA,eAAe,CAACH,SAAS,CAACkB,WAAD,CAAV,CAAf;AACD;AACF,KAJD;AAKD,GAPD;;AASA,sBACE,uDACE,oBAAC,iBAAD;AACE,IAAA,SAAS,EAAEC,MAAM,CAACC,MAAP,CAAcpB,SAAd,CADb;AAEE,IAAA,mBAAmB,EAAEK,mBAFvB;AAGE,IAAA,iBAAiB,EAAC,KAHpB;AAIE,IAAA,oBAAoB,EAAC,QAJvB;AAKE,IAAA,yBAAyB,EAAEU,yBAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQGb,gBAAgB,CAACmB,IAAjB,GAAwB,CAAxB,iBACC;AAAK,IAAA,SAAS,EAAC,uDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAFF,CATJ,CADF;AAiBD,CAhDD;;AAkDA,eAAevB,kBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport PlaylistSelection from \"../../components/PlaylistSelection\";\nimport { FilterFunctionProps } from \"./filter\";\nimport { PlaylistObjectSimplifiedWithTrackIds, TrackWithAudioFeatures } from \"../../models/Spotify\";\n\ninterface IProps extends FilterFunctionProps {\n  playlists: { [key: string]: PlaylistObjectSimplifiedWithTrackIds };\n  tracks: { [key: string]: TrackWithAudioFeatures };\n  playlistsLoading: Set<string>;\n  refreshPlaylist: (playlist: SpotifyApi.PlaylistObjectSimplified) => void;\n}\n\nconst FilterAddPlaylists: React.FunctionComponent<IProps> = (props: IProps) => {\n  const { playlists, tracks, playlistsLoading, refreshPlaylist, outputCallback } = props;\n\n  const [selectedPlaylistIds, setSelectedPlaylistIds] = useState<string[]>([]);\n\n  useEffect(() => {\n    // Pass up new function on change\n    const selectedPlaylistTracks: TrackWithAudioFeatures[] = selectedPlaylistIds\n      .map((pid) => playlists[pid].track_ids)\n      .map((tids) => tids.map((tid) => tracks[tid]))\n      .flat();\n    outputCallback(\n      (tracks: TrackWithAudioFeatures[]): TrackWithAudioFeatures[] => [\n        ...tracks,\n        ...selectedPlaylistTracks\n      ],\n      `${selectedPlaylistIds.length} Playlist${\n        selectedPlaylistIds.length !== 1 ? \"s\" : \"\"\n      } Selected`\n    );\n  }, [selectedPlaylistIds, playlists, tracks]);\n\n  const onPlaylistSelectionChange = (playlist_ids: string[]) => {\n    setSelectedPlaylistIds(playlist_ids);\n    playlist_ids.forEach((playlist_id) => {\n      if (playlists[playlist_id].track_ids.length === 0) {\n        refreshPlaylist(playlists[playlist_id]);\n      }\n    });\n  };\n\n  return (\n    <>\n      <PlaylistSelection\n        playlists={Object.values(playlists)}\n        selectedPlaylistIds={selectedPlaylistIds}\n        selectionsAllowed=\"All\"\n        defaultSelectionType=\"Single\"\n        onPlaylistSelectionChange={onPlaylistSelectionChange}\n      />\n      {playlistsLoading.size > 0 && (\n        <div className=\"mt-3 d-flex align-items-center justify-content-center\">\n          <Spinner animation=\"border\" />\n          <span className=\"ml-3\">Loading tracks for selected playlists</span>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default FilterAddPlaylists;\n"]},"metadata":{},"sourceType":"module"}