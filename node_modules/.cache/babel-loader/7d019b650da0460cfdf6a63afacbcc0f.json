{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/components/PlaylistSelection.tsx\";\nimport React, { useState } from \"react\";\nimport { Badge, Dropdown, DropdownButton, FormControl, InputGroup, Table } from \"react-bootstrap\";\nimport useWindowSize from \"../hooks/WindowSize\";\nconst selectedBackground = \"linear-gradient(to right, rgba(0, 82, 157, 0.3), rgba(235, 18, 27, 0.3))\";\n\nconst PlaylistSelection = props => {\n  const {\n    playlists,\n    selectedPlaylistIds,\n    selectionsAllowed,\n    defaultSelectionType,\n    onPlaylistSelectionChange\n  } = props;\n  const [singlePlaylistSelection, setSinglePlaylistSelection] = useState(selectionsAllowed === \"All\" // If we are allowed all (two) selections\n  ? defaultSelectionType !== undefined ? defaultSelectionType === \"Single\" : true // If a default is defined, use it, otherwise default to single\n  : selectionsAllowed === \"Single\" // If a specific kind of selection is allowed, use that as the default (this will be fixed)\n  );\n  const [search, setSearch] = useState(\"\");\n  const windowSize = useWindowSize();\n\n  const onSearchChange = event => setSearch(event.currentTarget.value);\n\n  const singlePlaylistSelectionChange = value => () => {\n    if (value && selectedPlaylistIds.length > 1) {\n      onPlaylistSelectionChange(selectedPlaylistIds.length > 0 ? [selectedPlaylistIds[0]] : [], false);\n    }\n\n    setSinglePlaylistSelection(value);\n  };\n\n  const onComponentPlaylistSelected = playlist_id => () => {\n    if (singlePlaylistSelection || selectionsAllowed === \"Single\") {\n      onPlaylistSelectionChange([playlist_id], true);\n    } else {\n      if (selectedPlaylistIds.indexOf(playlist_id) === -1) {\n        onPlaylistSelectionChange([...selectedPlaylistIds, playlist_id], false);\n      } else {\n        onPlaylistSelectionChange([...selectedPlaylistIds.filter(pid => pid !== playlist_id)], false);\n      }\n    }\n  };\n\n  const filteredPlaylists = playlists.filter(p => p.name.toLowerCase().indexOf(search.toLowerCase()) !== -1 || p.uri.indexOf(search) !== -1);\n  const sortedPlaylists = filteredPlaylists.sort((a, b) => a.name === b.name ? 0 : a.name > b.name ? 1 : -1);\n\n  const bootstrapBreakpointBiggerThanSm = () => windowSize.innerWidth > 576; // Bootstrap >sm in js\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mw-100 m-auto\",\n    style: {\n      width: 700\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, bootstrapBreakpointBiggerThanSm() ? \"Search Playlists\" : \"Search\")), /*#__PURE__*/React.createElement(FormControl, {\n    placeholder: \"Playlist name...\",\n    value: search,\n    onChange: onSearchChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(DropdownButton, {\n    as: InputGroup.Append,\n    variant: \"outline-secondary\",\n    title: singlePlaylistSelection ? \"Single\" : \"Multiple\",\n    id: \"playlist-selection-types\",\n    alignRight: true,\n    disabled: selectionsAllowed !== \"All\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, (selectionsAllowed === \"Single\" || selectionsAllowed === \"All\") && /*#__PURE__*/React.createElement(Dropdown.Item, {\n    onClick: singlePlaylistSelectionChange(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, \"Single Playlist Selection\"), (selectionsAllowed === \"Multiple\" || selectionsAllowed === \"All\") && /*#__PURE__*/React.createElement(Dropdown.Item, {\n    onClick: singlePlaylistSelectionChange(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, \"Multiple Playlist Selection\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      maxHeight: 450,\n      overflowX: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    striped: true,\n    hover: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, sortedPlaylists.map(playlist => /*#__PURE__*/React.createElement(\"tr\", {\n    key: playlist.id,\n    onClick: onComponentPlaylistSelected(playlist.id),\n    style: {\n      cursor: \"pointer\",\n      background: selectedPlaylistIds.indexOf(playlist.id) !== -1 ? selectedBackground : undefined,\n      display: \"grid\",\n      gridTemplateColumns: \"60px 1fr\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      padding: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 19\n    }\n  }, playlist.images.length > 0 && /*#__PURE__*/React.createElement(\"img\", {\n    src: playlist.images[0].url,\n    className: \"w-100\",\n    alt: \"Artwork for: \" + playlist.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"text-left\",\n    style: {\n      padding: \"0 0 0 10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: 22\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, playlist.name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    variant: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 23\n    }\n  }, playlist.owner.display_name), /*#__PURE__*/React.createElement(Badge, {\n    variant: \"dark\",\n    className: \"ml-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 23\n    }\n  }, \"Songs: \", playlist.tracks.total), /*#__PURE__*/React.createElement(Badge, {\n    variant: \"danger\",\n    className: \"ml-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 23\n    }\n  }, playlist.public ? \"Public\" : \"Private\"))))))))));\n};\n\nexport default PlaylistSelection;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/components/PlaylistSelection.tsx"],"names":["React","useState","Badge","Dropdown","DropdownButton","FormControl","InputGroup","Table","useWindowSize","selectedBackground","PlaylistSelection","props","playlists","selectedPlaylistIds","selectionsAllowed","defaultSelectionType","onPlaylistSelectionChange","singlePlaylistSelection","setSinglePlaylistSelection","undefined","search","setSearch","windowSize","onSearchChange","event","currentTarget","value","singlePlaylistSelectionChange","length","onComponentPlaylistSelected","playlist_id","indexOf","filter","pid","filteredPlaylists","p","name","toLowerCase","uri","sortedPlaylists","sort","a","b","bootstrapBreakpointBiggerThanSm","innerWidth","width","Append","maxHeight","overflowX","map","playlist","id","cursor","background","display","gridTemplateColumns","padding","images","url","fontSize","owner","display_name","tracks","total","public"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Badge, Dropdown, DropdownButton, FormControl, InputGroup, Table } from \"react-bootstrap\";\nimport { PlaylistObjectSimplifiedWithTrackIds } from \"../models/Spotify\";\nimport useWindowSize from \"../hooks/WindowSize\";\n\ninterface IProps {\n  playlists: PlaylistObjectSimplifiedWithTrackIds[];\n  selectedPlaylistIds: string[];\n  selectionsAllowed: \"Single\" | \"Multiple\" | \"All\";\n  defaultSelectionType?: \"Single\" | \"Multiple\";\n  onPlaylistSelectionChange: (playlist_ids: string[], scrollOnFirstSelection: boolean) => void;\n}\n\nconst selectedBackground =\n  \"linear-gradient(to right, rgba(0, 82, 157, 0.3), rgba(235, 18, 27, 0.3))\";\n\nconst PlaylistSelection: React.FunctionComponent<IProps> = (props: IProps) => {\n  const {\n    playlists,\n    selectedPlaylistIds,\n    selectionsAllowed,\n    defaultSelectionType,\n    onPlaylistSelectionChange\n  } = props;\n\n  const [singlePlaylistSelection, setSinglePlaylistSelection] = useState(\n    selectionsAllowed === \"All\" // If we are allowed all (two) selections\n      ? defaultSelectionType !== undefined\n        ? defaultSelectionType === \"Single\"\n        : true // If a default is defined, use it, otherwise default to single\n      : selectionsAllowed === \"Single\" // If a specific kind of selection is allowed, use that as the default (this will be fixed)\n  );\n  const [search, setSearch] = useState(\"\");\n  const windowSize = useWindowSize();\n\n  const onSearchChange = (event: React.FormEvent<any>) => setSearch(event.currentTarget.value);\n  const singlePlaylistSelectionChange = (value: boolean) => () => {\n    if (value && selectedPlaylistIds.length > 1) {\n      onPlaylistSelectionChange(\n        selectedPlaylistIds.length > 0 ? [selectedPlaylistIds[0]] : [],\n        false\n      );\n    }\n    setSinglePlaylistSelection(value);\n  };\n  const onComponentPlaylistSelected = (playlist_id: string) => () => {\n    if (singlePlaylistSelection || selectionsAllowed === \"Single\") {\n      onPlaylistSelectionChange([playlist_id], true);\n    } else {\n      if (selectedPlaylistIds.indexOf(playlist_id) === -1) {\n        onPlaylistSelectionChange([...selectedPlaylistIds, playlist_id], false);\n      } else {\n        onPlaylistSelectionChange(\n          [...selectedPlaylistIds.filter((pid) => pid !== playlist_id)],\n          false\n        );\n      }\n    }\n  };\n\n  const filteredPlaylists = playlists.filter(\n    (p) => p.name.toLowerCase().indexOf(search.toLowerCase()) !== -1 || p.uri.indexOf(search) !== -1\n  );\n  const sortedPlaylists = filteredPlaylists.sort(\n    (a: PlaylistObjectSimplifiedWithTrackIds, b: PlaylistObjectSimplifiedWithTrackIds) =>\n      a.name === b.name ? 0 : a.name > b.name ? 1 : -1\n  );\n\n  const bootstrapBreakpointBiggerThanSm = () => windowSize.innerWidth > 576; // Bootstrap >sm in js\n\n  return (\n    <>\n      <div className=\"mw-100 m-auto\" style={{ width: 700 }}>\n        <InputGroup className=\"mb-1\">\n          <InputGroup.Prepend>\n            <InputGroup.Text>\n              {bootstrapBreakpointBiggerThanSm() ? \"Search Playlists\" : \"Search\"}\n            </InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl placeholder=\"Playlist name...\" value={search} onChange={onSearchChange} />\n          <DropdownButton\n            as={InputGroup.Append}\n            variant=\"outline-secondary\"\n            title={singlePlaylistSelection ? \"Single\" : \"Multiple\"}\n            id=\"playlist-selection-types\"\n            alignRight\n            disabled={selectionsAllowed !== \"All\"}\n          >\n            {(selectionsAllowed === \"Single\" || selectionsAllowed === \"All\") && (\n              <Dropdown.Item onClick={singlePlaylistSelectionChange(true)}>\n                Single Playlist Selection\n              </Dropdown.Item>\n            )}\n            {(selectionsAllowed === \"Multiple\" || selectionsAllowed === \"All\") && (\n              <Dropdown.Item onClick={singlePlaylistSelectionChange(false)}>\n                Multiple Playlist Selection\n              </Dropdown.Item>\n            )}\n          </DropdownButton>\n        </InputGroup>\n\n        <div style={{ maxHeight: 450, overflowX: \"auto\" }}>\n          <Table striped hover>\n            <tbody>\n              {sortedPlaylists.map((playlist) => (\n                <tr\n                  key={playlist.id}\n                  onClick={onComponentPlaylistSelected(playlist.id)}\n                  style={{\n                    cursor: \"pointer\",\n                    background:\n                      selectedPlaylistIds.indexOf(playlist.id) !== -1\n                        ? selectedBackground\n                        : undefined,\n                    display: \"grid\",\n                    gridTemplateColumns: \"60px 1fr\"\n                  }}\n                >\n                  <td style={{ padding: 2 }}>\n                    {playlist.images.length > 0 && (\n                      <img\n                        src={playlist.images[0].url}\n                        className=\"w-100\"\n                        alt={\"Artwork for: \" + playlist.name}\n                      />\n                    )}\n                  </td>\n                  <td className=\"text-left\" style={{ padding: \"0 0 0 10px\" }}>\n                    <div style={{ fontSize: 22 }}>{playlist.name}</div>\n                    <div>\n                      <Badge variant=\"primary\">{playlist.owner.display_name}</Badge>\n                      <Badge variant=\"dark\" className=\"ml-1\">\n                        Songs: {playlist.tracks.total}\n                      </Badge>\n                      <Badge variant=\"danger\" className=\"ml-1\">\n                        {playlist.public ? \"Public\" : \"Private\"}\n                      </Badge>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PlaylistSelection;\n"]},"metadata":{},"sourceType":"module"}