{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/App.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useRoutes, useRedirect } from \"hookrouter\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport cogoToast from \"cogo-toast\";\nimport Navigation from \"./components/Navigation\";\nimport Footer from \"./components/Footer\";\nimport TokenRefreshWarning from \"./components/TokenRefreshWarning\";\nimport StoredDataDialog from \"./components/StoredDataDialog\";\nimport MetaTags from \"./components/MetaTags\";\nimport SpotifyAuthorization from \"./pages/SpotifyAuthorization\";\nimport Home from \"./pages/Home\";\nimport Sort from \"./pages/Sort\";\nimport Compare from \"./pages/Compare\";\nimport Tools from \"./pages/Tools\";\nimport About from \"./pages/About\";\nimport NotFound from \"./pages/NotFound\";\nimport useNavigatorOnline from \"./hooks/NavigatorOnline\";\nimport useScrollToTopOnRouteChange from \"./hooks/ScrollToTopOnRouteChange\";\nimport { getAllSpotifyUsersPlaylists, getAllTracksInPlaylist, getAudioFeaturesForTracks } from \"./logic/Spotify\";\nimport { arrayToObject } from \"./logic/Utils\";\nconst localStorageKey = \"emotionify-app\";\nconst storageVersion = 1;\nconst emptySpotifyData = {\n  user: undefined,\n  playlists: {},\n  tracks: {},\n  audioFeatures: {}\n};\nexport const App = () => {\n  const [token, setToken] = useState(undefined);\n  const [spotifyData, setSpotifyData] = useState(emptySpotifyData);\n  const [storedDataDialogOpen, setStoredDataDialogOpen] = useState(false);\n  const [playlistsLoading, setPlaylistsLoading] = useState(new Set());\n  const isOnline = useNavigatorOnline();\n  useScrollToTopOnRouteChange();\n\n  const onTokenChange = newToken => setToken(newToken);\n\n  const onLogOut = () => onTokenChange(undefined);\n\n  const openStoredDataDialog = () => setStoredDataDialogOpen(true);\n\n  const closeStoredDataDialog = () => setStoredDataDialogOpen(false);\n\n  const refreshUsersPlaylists = (hard = true) => {\n    if (token !== undefined && spotifyData.user !== undefined) {\n      getAllSpotifyUsersPlaylists(token, spotifyData.user).then(playlists => {\n        // Remove all requested playlist track ids if we are refreshing hard\n        setSpotifyData(prevState => ({ ...prevState,\n          playlists: { ...arrayToObject(playlists.map(p => p.id in prevState.playlists && !hard ? { ...p,\n              track_ids: prevState.playlists[p.id].track_ids\n            } : p), \"id\")\n          }\n        }));\n      }).catch(err => cogoToast.error(\"Could not get your playlists. Make sure you are connected to the internet and that your token is valid.\", {\n        position: \"bottom-center\",\n        heading: \"Error When Fetching Playlists\",\n        hideAfter: 20,\n        onClick: hide => hide()\n      }));\n    }\n  };\n\n  const refreshPlaylist = playlist => {\n    if (token !== undefined && !playlistsLoading.has(playlist.id)) {\n      setPlaylistsLoading(prevState => new Set([...Array.from(prevState), playlist.id]));\n      getAllTracksInPlaylist(token, playlist).then(tracks => {\n        setSpotifyData(prevState => {\n          const tracks_with_data = tracks.filter(t => Object.values(t).length !== 1); // Filter out tracks that don't have data (can happen with vidoes - will only be {audio_features: undefined})\n\n          if (tracks.length !== tracks_with_data.length) {\n            cogoToast.warn(`Could not get data for ${tracks.length - tracks_with_data.length} song(s) from \"${playlist.name}\". These are most likely videos in the playlist which are not supported.`, {\n              position: \"bottom-center\",\n              heading: \"Possible Missing Songs\",\n              hideAfter: 20,\n              onClick: hide => hide()\n            });\n          }\n\n          const new_tracks = tracks_with_data.filter(t => !(t.id in prevState.tracks));\n          return { ...prevState,\n            tracks: { ...prevState.tracks,\n              ...arrayToObject(new_tracks, \"id\")\n            },\n            playlists: { ...prevState.playlists,\n              [playlist.id]: { ...prevState.playlists[playlist.id],\n                track_ids: tracks.map(t => t.id)\n              }\n            }\n          };\n        });\n      }).catch(err => cogoToast.error(`Could not get songs for the playlist \"${playlist.name}\". Make sure you are connected to the internet and that your token is valid.`, {\n        position: \"bottom-center\",\n        heading: \"Error When Fetching Playlist's Songs\",\n        hideAfter: 20,\n        onClick: hide => hide()\n      })).finally(() => setPlaylistsLoading(prevState => {\n        const updatedPlaylistsLoading = new Set(prevState);\n        updatedPlaylistsLoading.delete(playlist.id);\n        return updatedPlaylistsLoading;\n      }));\n    }\n  };\n\n  useEffect(() => {\n    // Retrieve part of state from localStorage on startup\n    let stored_data = localStorage.getItem(localStorageKey);\n\n    if (stored_data !== null) {\n      try {\n        const stored_data_parsed = JSON.parse(stored_data);\n        stored_data_parsed.token.expiry = new Date(stored_data_parsed.token.expiry);\n\n        if (stored_data_parsed.version === storageVersion && stored_data_parsed.token.expiry > new Date()) {\n          setToken(stored_data_parsed.token);\n          setSpotifyData({ ...emptySpotifyData,\n            user: stored_data_parsed.user,\n            playlists: stored_data_parsed.playlists\n          });\n          refreshUsersPlaylists();\n        }\n      } catch (error) {\n        console.error(\"Failed to read state from localStorage\");\n      }\n    }\n  }, []);\n  useEffect(() => {\n    // Store part of state in localStorage\n    if (token !== undefined) {\n      let data_to_store = {\n        version: storageVersion,\n        token: token,\n        user: spotifyData.user,\n        playlists: arrayToObject(Object.values(spotifyData.playlists).map(p => {\n          return { ...p,\n            track_ids: []\n          };\n        }), \"id\") // Empty track_id lists in playlist objects\n\n      };\n      localStorage.setItem(localStorageKey, JSON.stringify(data_to_store));\n    } else {\n      localStorage.removeItem(localStorageKey);\n    }\n  }, [token, spotifyData.user, spotifyData.playlists]);\n  useEffect(() => {\n    // Request the user when the token changes\n    if (token === undefined) {\n      setSpotifyData(prevState => ({ ...prevState,\n        user: undefined\n      }));\n    } else {\n      const spotifyApi = new SpotifyWebApi();\n      spotifyApi.setAccessToken(token.value);\n      spotifyApi.getMe().then(user => {\n        if (spotifyData.user === undefined) {\n          // If there is currently no user, clear the playlists and put the new user in\n          setSpotifyData(prevState => ({ ...prevState,\n            playlists: {},\n            user: user\n          }));\n        } else if (spotifyData.user.id !== user.id) {\n          // If this is a new user\n          setSpotifyData(prevState => ({ ...prevState,\n            playlists: {},\n            user: user\n          }));\n        } else {\n          // Same user, new token\n          setSpotifyData(prevState => ({ ...prevState,\n            user: user\n          }));\n        }\n      }).catch(err => cogoToast.error(\"Could not get your profile. Make sure you are connected to the internet and that your token is valid.\", {\n        position: \"bottom-center\",\n        heading: \"Error When Fetching Your Profile\",\n        hideAfter: 20,\n        onClick: hide => hide()\n      }));\n    }\n  }, [token]);\n  useEffect(() => {\n    // Request playlists on user change\n    if (spotifyData.user === undefined) {\n      setSpotifyData(prevState => ({ ...prevState,\n        playlists: {}\n      }));\n    } else {\n      refreshUsersPlaylists();\n    }\n  }, [spotifyData.user]);\n  useEffect(() => {\n    // Request audio features when needed\n    const track_ids_with_no_audio_features = Object.values(spotifyData.tracks).filter(t => t.audio_features === undefined).map(t => t.id);\n\n    if (token !== undefined && track_ids_with_no_audio_features.length > 0) {\n      getAudioFeaturesForTracks(token, track_ids_with_no_audio_features).then(audio_features => {\n        // Some tracks will return null audio features\n        // Check if any tracks do not have audio features\n        const audio_features_by_track_id = arrayToObject(audio_features.filter(af => af !== null), \"id\");\n        const tracks_with_new_audio_features = track_ids_with_no_audio_features.map(tid => ({ ...spotifyData.tracks[tid],\n          audio_features: tid in audio_features_by_track_id ? audio_features_by_track_id[tid] : null\n        })); // Show a warning if there were tracks with no audio features\n\n        const null_audio_feature_tracks = tracks_with_new_audio_features.filter(t => t.audio_features === null);\n\n        if (null_audio_feature_tracks.length > 0) {\n          console.warn(`Some audio features are null: ${null_audio_feature_tracks.map(t => t.id).join(\", \")}`);\n        }\n\n        setSpotifyData(prevState => ({ ...prevState,\n          tracks: { ...prevState.tracks,\n            ...arrayToObject(tracks_with_new_audio_features, \"id\")\n          }\n        }));\n      }).catch(err => cogoToast.error(\"Could not get audio features for some songs. Make sure you are connected to the internet and that your token is valid.\", {\n        position: \"bottom-center\",\n        heading: \"Error When Fetching Song Audio Features\",\n        hideAfter: 20,\n        onClick: hide => hide()\n      }));\n    }\n  }, [spotifyData.tracks]);\n  useEffect(() => {\n    // Display a warning when offline\n    if (!isOnline) {\n      cogoToast.warn(\"You are now offline. You will not be able to request data from Spotify unless you are connected to the internet.\", {\n        position: \"bottom-center\",\n        heading: \"Offline\",\n        hideAfter: 10,\n        onClick: hide => hide()\n      });\n    }\n  }, [isOnline]);\n  const routes = {\n    \"/\": () => /*#__PURE__*/React.createElement(MetaTags, {\n      route: \"/\",\n      description: \"Easily create emotionally gradiented Spotify playlists for smoother emotional transitions in your listening.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Home, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }\n    })),\n    \"/spotify-authorization\": () => /*#__PURE__*/React.createElement(SpotifyAuthorization, {\n      onTokenChange: onTokenChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 37\n      }\n    }),\n    \"/spotify-authorization/\": () => /*#__PURE__*/React.createElement(SpotifyAuthorization, {\n      onTokenChange: onTokenChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 38\n      }\n    }),\n    \"/sort\": () => /*#__PURE__*/React.createElement(MetaTags, {\n      route: \"/sort\",\n      titlePrefix: \"Sort - \",\n      description: \"Select one of your Spotify playlists and look at how the new playlist is sorted. You can then create the new playlist or select a different playlist.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Sort, {\n      token: token,\n      user: spotifyData.user,\n      playlists: spotifyData.playlists,\n      tracks: spotifyData.tracks,\n      playlistsLoading: playlistsLoading,\n      refreshPlaylist: refreshPlaylist,\n      refreshUsersPlaylists: refreshUsersPlaylists,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }\n    })),\n    \"/compare\": () => /*#__PURE__*/React.createElement(MetaTags, {\n      route: \"/compare\",\n      titlePrefix: \"Compare - \",\n      description: \"Select playlists and compare them on one audio feature, two audio features or seven pre-selected audio features.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Compare, {\n      user: spotifyData.user,\n      playlists: spotifyData.playlists,\n      tracks: spotifyData.tracks,\n      playlistsLoading: playlistsLoading,\n      refreshPlaylist: refreshPlaylist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }\n    })),\n    \"/tools\": () => /*#__PURE__*/React.createElement(MetaTags, {\n      route: \"/tools\",\n      titlePrefix: \"Tools - \",\n      description: \"Apply filters and functions to your Spotify playlists to order then in a way you want.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Tools, {\n      token: token,\n      user: spotifyData.user,\n      playlists: spotifyData.playlists,\n      tracks: spotifyData.tracks,\n      playlistsLoading: playlistsLoading,\n      refreshPlaylist: refreshPlaylist,\n      refreshUsersPlaylists: refreshUsersPlaylists,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }\n    })),\n    \"/about\": () => /*#__PURE__*/React.createElement(MetaTags, {\n      route: \"/about\",\n      titlePrefix: \"About - \",\n      description: \"Emotionfy is a webapp that helps you look at your Spotify playlists and the pre-calculated audio features of each song in playlists to plot them on an emotional pane. The app also provides other tools for manipulating playlists using these features. \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(About, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }\n    }))\n  };\n  const routeResult = useRoutes(routes);\n  useRedirect(\"/sort/\", \"/sort\");\n  useRedirect(\"/compare/\", \"/compare\");\n  useRedirect(\"/about/\", \"/about\");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TokenRefreshWarning, {\n    token: token,\n    onLogOut: onLogOut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }\n  }), token !== undefined && spotifyData.user !== undefined && storedDataDialogOpen && /*#__PURE__*/React.createElement(StoredDataDialog, {\n    token: token,\n    user: spotifyData.user,\n    playlists: spotifyData.playlists,\n    tracks: spotifyData.tracks,\n    onClose: closeStoredDataDialog,\n    onLogOut: onLogOut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Navigation, {\n    user: spotifyData.user,\n    onAuthButtonLoggedInClick: openStoredDataDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }\n  }), routeResult || /*#__PURE__*/React.createElement(NotFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }\n  }));\n};\nexport default App;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/App.tsx"],"names":["React","useState","useEffect","useRoutes","useRedirect","SpotifyWebApi","cogoToast","Navigation","Footer","TokenRefreshWarning","StoredDataDialog","MetaTags","SpotifyAuthorization","Home","Sort","Compare","Tools","About","NotFound","useNavigatorOnline","useScrollToTopOnRouteChange","getAllSpotifyUsersPlaylists","getAllTracksInPlaylist","getAudioFeaturesForTracks","arrayToObject","localStorageKey","storageVersion","emptySpotifyData","user","undefined","playlists","tracks","audioFeatures","App","token","setToken","spotifyData","setSpotifyData","storedDataDialogOpen","setStoredDataDialogOpen","playlistsLoading","setPlaylistsLoading","Set","isOnline","onTokenChange","newToken","onLogOut","openStoredDataDialog","closeStoredDataDialog","refreshUsersPlaylists","hard","then","prevState","map","p","id","track_ids","catch","err","error","position","heading","hideAfter","onClick","hide","refreshPlaylist","playlist","has","Array","from","tracks_with_data","filter","t","Object","values","length","warn","name","new_tracks","finally","updatedPlaylistsLoading","delete","stored_data","localStorage","getItem","stored_data_parsed","JSON","parse","expiry","Date","version","console","data_to_store","setItem","stringify","removeItem","spotifyApi","setAccessToken","value","getMe","track_ids_with_no_audio_features","audio_features","audio_features_by_track_id","af","tracks_with_new_audio_features","tid","null_audio_feature_tracks","join","routes","routeResult"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useRoutes, useRedirect } from \"hookrouter\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport cogoToast from \"cogo-toast\";\nimport Navigation from \"./components/Navigation\";\nimport Footer from \"./components/Footer\";\nimport TokenRefreshWarning from \"./components/TokenRefreshWarning\";\nimport StoredDataDialog from \"./components/StoredDataDialog\";\nimport MetaTags from \"./components/MetaTags\";\nimport SpotifyAuthorization from \"./pages/SpotifyAuthorization\";\nimport Home from \"./pages/Home\";\nimport Sort from \"./pages/Sort\";\nimport Compare from \"./pages/Compare\";\nimport Tools from \"./pages/Tools\";\nimport About from \"./pages/About\";\nimport NotFound from \"./pages/NotFound\";\nimport useNavigatorOnline from \"./hooks/NavigatorOnline\";\nimport useScrollToTopOnRouteChange from \"./hooks/ScrollToTopOnRouteChange\";\nimport {\n  Token,\n  SpotifyData,\n  PlaylistObjectSimplifiedWithTrackIds,\n  TrackWithAudioFeatures\n} from \"./models/Spotify\";\nimport {\n  getAllSpotifyUsersPlaylists,\n  getAllTracksInPlaylist,\n  getAudioFeaturesForTracks\n} from \"./logic/Spotify\";\nimport { arrayToObject } from \"./logic/Utils\";\n\nconst localStorageKey = \"emotionify-app\";\nconst storageVersion = 1;\n\nconst emptySpotifyData = {\n  user: undefined,\n  playlists: {},\n  tracks: {},\n  audioFeatures: {}\n};\n\ninterface IStorage {\n  version: number;\n  token: Token;\n  user: SpotifyApi.UserObjectPrivate | undefined;\n  playlists: { [key: string]: PlaylistObjectSimplifiedWithTrackIds };\n}\n\nexport const App: React.FunctionComponent = () => {\n  const [token, setToken] = useState<Token | undefined>(undefined);\n  const [spotifyData, setSpotifyData] = useState<SpotifyData>(emptySpotifyData);\n  const [storedDataDialogOpen, setStoredDataDialogOpen] = useState(false);\n  const [playlistsLoading, setPlaylistsLoading] = useState<Set<string>>(new Set());\n  const isOnline = useNavigatorOnline();\n  useScrollToTopOnRouteChange();\n\n  const onTokenChange = (newToken: Token | undefined) => setToken(newToken);\n  const onLogOut = () => onTokenChange(undefined);\n  const openStoredDataDialog = () => setStoredDataDialogOpen(true);\n  const closeStoredDataDialog = () => setStoredDataDialogOpen(false);\n\n  const refreshUsersPlaylists = (hard: boolean = true) => {\n    if (token !== undefined && spotifyData.user !== undefined) {\n      getAllSpotifyUsersPlaylists(token, spotifyData.user)\n        .then((playlists) => {\n          // Remove all requested playlist track ids if we are refreshing hard\n          setSpotifyData((prevState) => ({\n            ...prevState,\n            playlists: {\n              ...arrayToObject<PlaylistObjectSimplifiedWithTrackIds>(\n                playlists.map((p) =>\n                  p.id in prevState.playlists && !hard\n                    ? { ...p, track_ids: prevState.playlists[p.id].track_ids }\n                    : p\n                ),\n                \"id\"\n              )\n            }\n          }));\n        })\n        .catch((err) =>\n          cogoToast.error(\n            \"Could not get your playlists. Make sure you are connected to the internet and that your token is valid.\",\n            {\n              position: \"bottom-center\",\n              heading: \"Error When Fetching Playlists\",\n              hideAfter: 20,\n              onClick: (hide: any) => hide()\n            }\n          )\n        );\n    }\n  };\n\n  const refreshPlaylist = (playlist: SpotifyApi.PlaylistObjectSimplified) => {\n    if (token !== undefined && !playlistsLoading.has(playlist.id)) {\n      setPlaylistsLoading((prevState) => new Set([...Array.from(prevState), playlist.id]));\n      getAllTracksInPlaylist(token, playlist)\n        .then((tracks) => {\n          setSpotifyData((prevState) => {\n            const tracks_with_data = tracks.filter((t) => Object.values(t).length !== 1); // Filter out tracks that don't have data (can happen with vidoes - will only be {audio_features: undefined})\n            if (tracks.length !== tracks_with_data.length) {\n              cogoToast.warn(\n                `Could not get data for ${tracks.length - tracks_with_data.length} song(s) from \"${\n                  playlist.name\n                }\". These are most likely videos in the playlist which are not supported.`,\n                {\n                  position: \"bottom-center\",\n                  heading: \"Possible Missing Songs\",\n                  hideAfter: 20,\n                  onClick: (hide: any) => hide()\n                }\n              );\n            }\n            const new_tracks = tracks_with_data.filter((t) => !(t.id in prevState.tracks));\n            return {\n              ...prevState,\n              tracks: {\n                ...prevState.tracks,\n                ...arrayToObject<TrackWithAudioFeatures>(new_tracks, \"id\")\n              },\n              playlists: {\n                ...prevState.playlists,\n                [playlist.id]: {\n                  ...prevState.playlists[playlist.id],\n                  track_ids: tracks.map((t) => t.id)\n                }\n              }\n            };\n          });\n        })\n        .catch((err) =>\n          cogoToast.error(\n            `Could not get songs for the playlist \"${playlist.name}\". Make sure you are connected to the internet and that your token is valid.`,\n            {\n              position: \"bottom-center\",\n              heading: \"Error When Fetching Playlist's Songs\",\n              hideAfter: 20,\n              onClick: (hide: any) => hide()\n            }\n          )\n        )\n        .finally(() =>\n          setPlaylistsLoading((prevState) => {\n            const updatedPlaylistsLoading = new Set(prevState);\n            updatedPlaylistsLoading.delete(playlist.id);\n            return updatedPlaylistsLoading;\n          })\n        );\n    }\n  };\n\n  useEffect(() => {\n    // Retrieve part of state from localStorage on startup\n    let stored_data: string | null = localStorage.getItem(localStorageKey);\n    if (stored_data !== null) {\n      try {\n        const stored_data_parsed: IStorage = JSON.parse(stored_data);\n        stored_data_parsed.token.expiry = new Date(stored_data_parsed.token.expiry);\n        if (\n          stored_data_parsed.version === storageVersion &&\n          stored_data_parsed.token.expiry > new Date()\n        ) {\n          setToken(stored_data_parsed.token);\n          setSpotifyData({\n            ...emptySpotifyData,\n            user: stored_data_parsed.user,\n            playlists: stored_data_parsed.playlists\n          });\n          refreshUsersPlaylists();\n        }\n      } catch (error) {\n        console.error(\"Failed to read state from localStorage\");\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    // Store part of state in localStorage\n    if (token !== undefined) {\n      let data_to_store: IStorage = {\n        version: storageVersion,\n        token: token,\n        user: spotifyData.user,\n        playlists: arrayToObject<PlaylistObjectSimplifiedWithTrackIds>(\n          Object.values(spotifyData.playlists).map((p) => {\n            return { ...p, track_ids: [] };\n          }),\n          \"id\"\n        ) // Empty track_id lists in playlist objects\n      };\n      localStorage.setItem(localStorageKey, JSON.stringify(data_to_store));\n    } else {\n      localStorage.removeItem(localStorageKey);\n    }\n  }, [token, spotifyData.user, spotifyData.playlists]);\n\n  useEffect(() => {\n    // Request the user when the token changes\n    if (token === undefined) {\n      setSpotifyData((prevState) => ({ ...prevState, user: undefined }));\n    } else {\n      const spotifyApi = new SpotifyWebApi();\n      spotifyApi.setAccessToken(token.value);\n      spotifyApi\n        .getMe()\n        .then((user) => {\n          if (spotifyData.user === undefined) {\n            // If there is currently no user, clear the playlists and put the new user in\n            setSpotifyData((prevState) => ({ ...prevState, playlists: {}, user: user }));\n          } else if (spotifyData.user.id !== user.id) {\n            // If this is a new user\n            setSpotifyData((prevState) => ({ ...prevState, playlists: {}, user: user }));\n          } else {\n            // Same user, new token\n            setSpotifyData((prevState) => ({ ...prevState, user: user }));\n          }\n        })\n        .catch((err) =>\n          cogoToast.error(\n            \"Could not get your profile. Make sure you are connected to the internet and that your token is valid.\",\n            {\n              position: \"bottom-center\",\n              heading: \"Error When Fetching Your Profile\",\n              hideAfter: 20,\n              onClick: (hide: any) => hide()\n            }\n          )\n        );\n    }\n  }, [token]);\n\n  useEffect(() => {\n    // Request playlists on user change\n    if (spotifyData.user === undefined) {\n      setSpotifyData((prevState) => ({ ...prevState, playlists: {} }));\n    } else {\n      refreshUsersPlaylists();\n    }\n  }, [spotifyData.user]);\n\n  useEffect(() => {\n    // Request audio features when needed\n    const track_ids_with_no_audio_features: string[] = Object.values(spotifyData.tracks)\n      .filter((t) => t.audio_features === undefined)\n      .map((t) => t.id);\n\n    if (token !== undefined && track_ids_with_no_audio_features.length > 0) {\n      getAudioFeaturesForTracks(token, track_ids_with_no_audio_features)\n        .then((audio_features: (SpotifyApi.AudioFeaturesObject | null)[]) => {\n          // Some tracks will return null audio features\n          // Check if any tracks do not have audio features\n          const audio_features_by_track_id = arrayToObject<SpotifyApi.AudioFeaturesObject>(\n            audio_features.filter((af): af is SpotifyApi.AudioFeaturesObject => af !== null),\n            \"id\"\n          );\n          const tracks_with_new_audio_features: TrackWithAudioFeatures[] = track_ids_with_no_audio_features.map(\n            (tid) => ({\n              ...spotifyData.tracks[tid],\n              audio_features:\n                tid in audio_features_by_track_id ? audio_features_by_track_id[tid] : null\n            })\n          );\n\n          // Show a warning if there were tracks with no audio features\n          const null_audio_feature_tracks = tracks_with_new_audio_features.filter(\n            (t) => t.audio_features === null\n          );\n          if (null_audio_feature_tracks.length > 0) {\n            console.warn(\n              `Some audio features are null: ${null_audio_feature_tracks\n                .map((t) => t.id)\n                .join(\", \")}`\n            );\n          }\n\n          setSpotifyData((prevState) => ({\n            ...prevState,\n            tracks: {\n              ...prevState.tracks,\n              ...arrayToObject<TrackWithAudioFeatures>(tracks_with_new_audio_features, \"id\")\n            }\n          }));\n        })\n        .catch((err) =>\n          cogoToast.error(\n            \"Could not get audio features for some songs. Make sure you are connected to the internet and that your token is valid.\",\n            {\n              position: \"bottom-center\",\n              heading: \"Error When Fetching Song Audio Features\",\n              hideAfter: 20,\n              onClick: (hide: any) => hide()\n            }\n          )\n        );\n    }\n  }, [spotifyData.tracks]);\n\n  useEffect(() => {\n    // Display a warning when offline\n    if (!isOnline) {\n      cogoToast.warn(\n        \"You are now offline. You will not be able to request data from Spotify unless you are connected to the internet.\",\n        {\n          position: \"bottom-center\",\n          heading: \"Offline\",\n          hideAfter: 10,\n          onClick: (hide: any) => hide()\n        }\n      );\n    }\n  }, [isOnline]);\n\n  const routes = {\n    \"/\": () => (\n      <MetaTags\n        route=\"/\"\n        description=\"Easily create emotionally gradiented Spotify playlists for smoother emotional transitions in your listening.\"\n      >\n        <Home />\n      </MetaTags>\n    ),\n    \"/spotify-authorization\": () => <SpotifyAuthorization onTokenChange={onTokenChange} />,\n    \"/spotify-authorization/\": () => <SpotifyAuthorization onTokenChange={onTokenChange} />,\n    \"/sort\": () => (\n      <MetaTags\n        route=\"/sort\"\n        titlePrefix=\"Sort - \"\n        description=\"Select one of your Spotify playlists and look at how the new playlist is sorted. You can then create the new playlist or select a different playlist.\"\n      >\n        <Sort\n          token={token}\n          user={spotifyData.user}\n          playlists={spotifyData.playlists}\n          tracks={spotifyData.tracks}\n          playlistsLoading={playlistsLoading}\n          refreshPlaylist={refreshPlaylist}\n          refreshUsersPlaylists={refreshUsersPlaylists}\n        />\n      </MetaTags>\n    ),\n    \"/compare\": () => (\n      <MetaTags\n        route=\"/compare\"\n        titlePrefix=\"Compare - \"\n        description=\"Select playlists and compare them on one audio feature, two audio features or seven pre-selected audio features.\"\n      >\n        <Compare\n          user={spotifyData.user}\n          playlists={spotifyData.playlists}\n          tracks={spotifyData.tracks}\n          playlistsLoading={playlistsLoading}\n          refreshPlaylist={refreshPlaylist}\n        />\n      </MetaTags>\n    ),\n    \"/tools\": () => (\n      <MetaTags\n        route=\"/tools\"\n        titlePrefix=\"Tools - \"\n        description=\"Apply filters and functions to your Spotify playlists to order then in a way you want.\"\n      >\n        <Tools\n          token={token}\n          user={spotifyData.user}\n          playlists={spotifyData.playlists}\n          tracks={spotifyData.tracks}\n          playlistsLoading={playlistsLoading}\n          refreshPlaylist={refreshPlaylist}\n          refreshUsersPlaylists={refreshUsersPlaylists}\n        />\n      </MetaTags>\n    ),\n    \"/about\": () => (\n      <MetaTags\n        route=\"/about\"\n        titlePrefix=\"About - \"\n        description=\"Emotionfy is a webapp that helps you look at your Spotify playlists and the pre-calculated audio features of each song in playlists to plot them on an emotional pane. The app also provides other tools for manipulating playlists using these features. \"\n      >\n        <About />\n      </MetaTags>\n    )\n  };\n  const routeResult = useRoutes(routes);\n  useRedirect(\"/sort/\", \"/sort\");\n  useRedirect(\"/compare/\", \"/compare\");\n  useRedirect(\"/about/\", \"/about\");\n\n  return (\n    <>\n      <TokenRefreshWarning token={token} onLogOut={onLogOut} />\n      {token !== undefined && spotifyData.user !== undefined && storedDataDialogOpen && (\n        <StoredDataDialog\n          token={token}\n          user={spotifyData.user}\n          playlists={spotifyData.playlists}\n          tracks={spotifyData.tracks}\n          onClose={closeStoredDataDialog}\n          onLogOut={onLogOut}\n        />\n      )}\n      <Navigation user={spotifyData.user} onAuthButtonLoggedInClick={openStoredDataDialog} />\n      {routeResult || <NotFound />}\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}