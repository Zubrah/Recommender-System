{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/About/index.tsx\";\nimport React from \"react\";\nimport { Container, Col, Row } from \"react-bootstrap\";\n\nconst About = () => {\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"justify-content-md-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"col-md-10 col-lg-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }\n  }, \"About the Project\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"justify-content-md-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 11\n    }\n  }, \"Spotify is one of the newest innovations to have come to audio listening and experience with over 125 million subscribers. Though the service has recently begun it dominates Apple Music and Amazon music in the audio streaming market. From music, they have extended the audio service to Podcasts, Audiobooks, and so on. Spotify Trends helps any content creator/musician in order to understand what listeners prefer and how to compete in this immensely growing market.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, \"This  Recommendify project aims to provide users with the best version of music playlists and songs based their pre-assigned variables in sort page that sorts musics and artists based on degree of valence to energy level.\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, \"FUTURE AIM:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, \"Create a web application that allows users to create playlists based on their emotional preferences since this is not 100% accurate in predictionsof users emotions. This is due to the fact that emotions and behaviours are highly opinion based and the values used to sort songs are averages over the whole song. This tool however does give insight on how well a computer can plot an emotional gradient with a list of songs.\"), /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, \"What are spotify audio features involved?\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"Here are some summaries from\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"Spotify\"), \":\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  }, \"Acousticness\"), \": A confidence measure from 0 to 1 of whether the track is acoustic. 1 represents high confidence the track is acoustic.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, \"Danceability\"), \": Danceability describes how suitable a track is for dancing based on a combination of musical elements. A value of 0 is least danceable and 1 is most danceable.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, \"Duration\"), \": The duration of the track in milliseconds.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, \"Energy\"), \": Energy is a measure from 0 to 1 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, \"Instrumentalness\"), \": Predicts whether a track contains no vocals. The closer the instrumentalness value is to 1, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }, \"Key\"), \": The estimated overall key of the track. (-1 if no key is detected)\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, \"Liveness\"), \": Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, \"Loudness\"), \": The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Values typical range between -60 and 0 db.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"Mode\"), \": Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"Speechiness\"), \": Speechiness detects the presence of spoken words in a track. Talk shows and audio books are closer to 1, songs made entirely of spoken words are above 0.66, songs that contain both music and speech are typically around 0.33 - 0.66 and values below 0.33 represent music and other non-speech-like tracks.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"Tempo\"), \": The overall estimated tempo of a track in beats per minute (BPM).\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, \"Time Signature\"), \": An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, \"Valence\"), \": A measure from 0 to 1 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive, while tracks with low valence sound more negative.\")))));\n};\n\nexport default About;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/About/index.tsx"],"names":["React","Container","Col","Row","About"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Container, Col, Row } from \"react-bootstrap\";\n\nconst About: React.FunctionComponent = () => {\n  return (\n    <Container>\n      <Row className=\"justify-content-md-center\">\n        <Col className=\"col-md-10 col-lg-8\">\n          <h1 className=\"text-center\">About the Project</h1>\n          <p className=\"justify-content-md-center\">\n          Spotify is one of the newest innovations to have come to audio listening and experience with over 125 million subscribers. \n          Though the service has recently begun it dominates Apple Music and Amazon music in the audio streaming market. \n          From music, they have extended the audio service to Podcasts, Audiobooks, and so on. Spotify Trends helps any content creator/musician in order to understand what listeners prefer and how to compete in this immensely growing market.\n          </p>\n          \n          <p>\n            This  Recommendify project aims to provide users with the best version of music playlists and \n            songs based their pre-assigned variables in sort page that sorts musics and artists\n            based on degree of valence to energy level.\n          </p>\n          <h4>\n            FUTURE AIM:\n          </h4>\n          <p>\n            Create a web application that allows users to create playlists based on their emotional preferences since\n            this is not 100% accurate in predictionsof users emotions. This is due to the fact that emotions and \n            behaviours are highly opinion based and the values used to sort songs are averages over the whole song. This tool however does give insight on\n            how well a computer can plot an emotional gradient with a list of songs.\n          </p>\n          \n          \n\n          \n          <h5 className=\"text-center\">What are spotify audio features involved?</h5>\n          <p>\n            Here are some summaries from{\" \"}\n            <a href=\"https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/\">\n              Spotify\n            </a>\n            :\n          </p>\n          <ul>\n            <li>\n              <code>Acousticness</code>: A confidence measure from 0 to 1 of whether the track is\n              acoustic. 1 represents high confidence the track is acoustic.\n            </li>\n            <li>\n              <code>Danceability</code>: Danceability describes how suitable a track is for dancing\n              based on a combination of musical elements. A value of 0 is least danceable and 1 is\n              most danceable.\n            </li>\n            <li>\n              <code>Duration</code>: The duration of the track in milliseconds.\n            </li>\n            <li>\n              <code>Energy</code>: Energy is a measure from 0 to 1 and represents a perceptual\n              measure of intensity and activity. Typically, energetic tracks feel fast, loud, and\n              noisy. For example, death metal has high energy, while a Bach prelude scores low on\n              the scale.\n            </li>\n            <li>\n              <code>Instrumentalness</code>: Predicts whether a track contains no vocals. The closer\n              the instrumentalness value is to 1, the greater likelihood the track contains no vocal\n              content. Values above 0.5 are intended to represent instrumental tracks, but\n              confidence is higher as the value approaches 1.\n            </li>\n            <li>\n              <code>Key</code>: The estimated overall key of the track. (-1 if no key is detected)\n            </li>\n            <li>\n              <code>Liveness</code>: Detects the presence of an audience in the recording. Higher\n              liveness values represent an increased probability that the track was performed live.\n              A value above 0.8 provides strong likelihood that the track is live.\n            </li>\n            <li>\n              <code>Loudness</code>: The overall loudness of a track in decibels (dB). Loudness\n              values are averaged across the entire track and are useful for comparing relative\n              loudness of tracks. Values typical range between -60 and 0 db.\n            </li>\n            <li>\n              <code>Mode</code>: Mode indicates the modality (major or minor) of a track, the type\n              of scale from which its melodic content is derived. Major is represented by 1 and\n              minor is 0.\n            </li>\n            <li>\n              <code>Speechiness</code>: Speechiness detects the presence of spoken words in a track.\n              Talk shows and audio books are closer to 1, songs made entirely of spoken words are\n              above 0.66, songs that contain both music and speech are typically around 0.33 - 0.66\n              and values below 0.33 represent music and other non-speech-like tracks.\n            </li>\n            <li>\n              <code>Tempo</code>: The overall estimated tempo of a track in beats per minute (BPM).\n            </li>\n            <li>\n              <code>Time Signature</code>: An estimated overall time signature of a track. The time\n              signature (meter) is a notational convention to specify how many beats are in each bar\n              (or measure).\n            </li>\n            <li>\n              <code>Valence</code>: A measure from 0 to 1 describing the musical positiveness\n              conveyed by a track. Tracks with high valence sound more positive, while tracks with\n              low valence sound more negative.\n            </li>\n          </ul>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default About;\n"]},"metadata":{},"sourceType":"module"}