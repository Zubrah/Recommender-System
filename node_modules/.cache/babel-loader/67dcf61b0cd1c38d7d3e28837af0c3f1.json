{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Tools/index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport cogoToast from \"cogo-toast\";\nimport { Accordion, Button, Card, Container, Dropdown, DropdownButton, InputGroup } from \"react-bootstrap\";\nimport FilterAddPlaylists from \"./FilterAddPlaylists\";\nimport FilterReverse from \"./FilterReverse\";\nimport FilterRandomise from \"./FilterRandomise\";\nimport FilterAudioFeaturePredicate from \"./FilterAudioFeaturePredicate\";\nimport FilterOrderByAudioFeature from \"./FilterOrderByAudioFeature\";\nimport FilterDistinct from \"./FilterDistinct\";\nimport SpotifyLoginStatusButton from \"../../components/SpotifyLoginStatusButton\";\nimport TrackTable from \"./TrackTable\";\nimport ExportPlaylistInput from \"../../components/ExportPlaylistInput\";\nimport { createPlaylist } from \"../../logic/Spotify\";\nconst filters = {\n  \"Add Playlist\": FilterAddPlaylists,\n  Reverse: FilterReverse,\n  Randomise: FilterRandomise,\n  \"Filter Audio Feature\": FilterAudioFeaturePredicate,\n  \"Order by Audio Feature\": FilterOrderByAudioFeature,\n  \"Remove Duplicates\": FilterDistinct\n};\n\nconst track_identity_function = tracks => tracks;\n\nconst Tools = props => {\n  const {\n    token,\n    user,\n    playlists,\n    tracks,\n    playlistsLoading,\n    refreshPlaylist,\n    refreshUsersPlaylists\n  } = props;\n  const [appliedFilters, setAppliedFilters] = useState([{\n    filterName: \"Add Playlist\",\n    filter: track_identity_function,\n    titleText: \"\"\n  }]);\n  const [addFilterDropdownSelection, setAddFilterDropdownSelection] = useState(Object.keys(filters)[0]);\n  const [activeCardEventKey, setActiveCardEventKey] = useState(\"0\"); // Need to keep track of these as dropdowns in the accordion will close cards\n\n  const [filteredTracks, setFilteredTracks] = useState([]); // Track table open state (need to track this in here otherwise it will close on every change)\n\n  const [trackTableOpen, setTrackTableOpen] = useState(false);\n\n  const trackTableOpenToggle = () => setTrackTableOpen(!trackTableOpen);\n\n  useEffect(() => {\n    // Apply new filters as they appear\n    const currentFilters = appliedFilters.map(af => af.filter);\n\n    if (currentFilters.indexOf(undefined) === -1) {\n      setFilteredTracks(appliedFilters.map(af => af.filter).reduce((accumulator, filter) => filter(accumulator), []));\n    } else {\n      setFilteredTracks([]);\n    }\n  }, [appliedFilters]);\n  const header = /*#__PURE__*/React.createElement(Container, {\n    className: \"mt-3 mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \"Playlist Tools\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-center lead col-md-7 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"Apply filters and functions to manipulate your playlists.\"));\n\n  if (user === undefined) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, header, /*#__PURE__*/React.createElement(Container, {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, \"Sign into Spotify\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, \"To get access to your playlists and the ability to create playlists, you need to sign into Spotify.\"), /*#__PURE__*/React.createElement(SpotifyLoginStatusButton, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  const onCardHeaderClick = eventKey => () => setActiveCardEventKey(activeCardEventKey !== eventKey ? eventKey : \"\");\n\n  const filterDropdownSelect = filterName => () => setAddFilterDropdownSelection(filterName);\n\n  const addFilter = () => {\n    setActiveCardEventKey(appliedFilters.length + \"\");\n    setAppliedFilters(currentlyAppliedFilters => [...currentlyAppliedFilters, {\n      filterName: addFilterDropdownSelection,\n      filter: undefined,\n      titleText: \"\"\n    }]);\n  };\n\n  const removeFilter = index => event => {\n    setAppliedFilters(currentlyAppliedFilters => {\n      let newListOfFeatures = [...currentlyAppliedFilters];\n      newListOfFeatures.splice(index, 1);\n      return newListOfFeatures;\n    });\n    event.stopPropagation();\n  };\n\n  const filterComponentOutputCallback = index => (filter, titleText) => {\n    setAppliedFilters(currentlyAppliedFilters => {\n      let newListOfFeatures = [...currentlyAppliedFilters];\n      newListOfFeatures[index] = {\n        filterName: newListOfFeatures[index].filterName,\n        filter: filter,\n        titleText: titleText\n      };\n      return newListOfFeatures;\n    });\n  };\n\n  const onExport = (name, isPublic) => {\n    return new Promise(async (resolve, reject) => {\n      if (filteredTracks.length === 0) {\n        cogoToast.warn(\"No songs present after filtering. Will not create an empty playlist.\", {\n          position: \"bottom-center\",\n          heading: \"No Songs\",\n          hideAfter: 10,\n          onClick: hide => hide()\n        });\n        reject();\n        return;\n      }\n\n      if (token !== undefined && user !== undefined) {\n        // Map the sorted tracks to uris\n        let track_uris = filteredTracks.map(t => tracks[t.id].uri); // Create the playlist\n\n        let success = await createPlaylist(token.value, user, name, isPublic, track_uris).then(playlist => {\n          refreshUsersPlaylists(false); // Get the new playlist by refreshing the playlist list (keep current track ids to not loose plot data)\n\n          return true;\n        }, err => {\n          console.error(err);\n          return false;\n        });\n        resolve(success);\n      }\n\n      resolve(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, header, /*#__PURE__*/React.createElement(Container, {\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Accordion, {\n    activeKey: activeCardEventKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, appliedFilters.map((appliedFilter, index) => {\n    let FilterComponent = filters[appliedFilter.filterName];\n    return /*#__PURE__*/React.createElement(Card, {\n      key: index + appliedFilter.filterName,\n      style: {\n        overflow: \"visible\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"d-flex align-items-center p-1\",\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: onCardHeaderClick(\"\" + index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: appliedFilter.filter === undefined ? \"danger\" : \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }, appliedFilter.filterName), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"ml-3 flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 19\n      }\n    }, appliedFilter.titleText), index !== 0 && /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      className: \"float-right\",\n      onClick: removeFilter(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    }, \"-\")), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n      eventKey: \"\" + index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FilterComponent, {\n      outputCallback: filterComponentOutputCallback(index),\n      playlists: playlists,\n      tracks: tracks,\n      playlistsLoading: playlistsLoading,\n      refreshPlaylist: refreshPlaylist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }\n    }))));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-3 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"w-auto d-inline-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }, \"Add filter\")), /*#__PURE__*/React.createElement(DropdownButton, {\n    as: InputGroup.Prepend,\n    variant: \"outline-primary\",\n    title: addFilterDropdownSelection,\n    id: \"add-filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }\n  }, Object.keys(filters).sort().map(filterName => /*#__PURE__*/React.createElement(Dropdown.Item, {\n    key: filterName,\n    onClick: filterDropdownSelect(filterName),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 19\n    }\n  }, filterName))), /*#__PURE__*/React.createElement(InputGroup.Append, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: addFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 15\n    }\n  }, \"Add\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TrackTable, {\n    tracks: filteredTracks,\n    open: trackTableOpen,\n    openToggle: trackTableOpenToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ExportPlaylistInput, {\n    onExport: onExport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default Tools;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Tools/index.tsx"],"names":["React","useState","useEffect","cogoToast","Accordion","Button","Card","Container","Dropdown","DropdownButton","InputGroup","FilterAddPlaylists","FilterReverse","FilterRandomise","FilterAudioFeaturePredicate","FilterOrderByAudioFeature","FilterDistinct","SpotifyLoginStatusButton","TrackTable","ExportPlaylistInput","createPlaylist","filters","Reverse","Randomise","track_identity_function","tracks","Tools","props","token","user","playlists","playlistsLoading","refreshPlaylist","refreshUsersPlaylists","appliedFilters","setAppliedFilters","filterName","filter","titleText","addFilterDropdownSelection","setAddFilterDropdownSelection","Object","keys","activeCardEventKey","setActiveCardEventKey","filteredTracks","setFilteredTracks","trackTableOpen","setTrackTableOpen","trackTableOpenToggle","currentFilters","map","af","indexOf","undefined","reduce","accumulator","header","onCardHeaderClick","eventKey","filterDropdownSelect","addFilter","length","currentlyAppliedFilters","removeFilter","index","event","newListOfFeatures","splice","stopPropagation","filterComponentOutputCallback","onExport","name","isPublic","Promise","resolve","reject","warn","position","heading","hideAfter","onClick","hide","track_uris","t","id","uri","success","value","then","playlist","err","console","error","appliedFilter","FilterComponent","overflow","cursor","Prepend","sort"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport cogoToast from \"cogo-toast\";\nimport {\n  Accordion,\n  Button,\n  Card,\n  Container,\n  Dropdown,\n  DropdownButton,\n  InputGroup\n} from \"react-bootstrap\";\nimport FilterAddPlaylists from \"./FilterAddPlaylists\";\nimport FilterReverse from \"./FilterReverse\";\nimport FilterRandomise from \"./FilterRandomise\";\nimport FilterAudioFeaturePredicate from \"./FilterAudioFeaturePredicate\";\nimport FilterOrderByAudioFeature from \"./FilterOrderByAudioFeature\";\nimport FilterDistinct from \"./FilterDistinct\";\nimport SpotifyLoginStatusButton from \"../../components/SpotifyLoginStatusButton\";\nimport TrackTable from \"./TrackTable\";\nimport ExportPlaylistInput from \"../../components/ExportPlaylistInput\";\nimport {\n  Token,\n  PlaylistObjectSimplifiedWithTrackIds,\n  TrackWithAudioFeatures\n} from \"../../models/Spotify\";\nimport { createPlaylist } from \"../../logic/Spotify\";\n\ninterface IProps {\n  token: Token | undefined;\n  user: SpotifyApi.UserObjectPrivate | undefined;\n  playlists: { [key: string]: PlaylistObjectSimplifiedWithTrackIds };\n  tracks: { [key: string]: TrackWithAudioFeatures };\n  playlistsLoading: Set<string>;\n  refreshPlaylist: (playlist: SpotifyApi.PlaylistObjectSimplified) => void;\n  refreshUsersPlaylists: (hard: boolean) => void;\n}\n\ninterface AppliedFilter {\n  filterName: string;\n  filter: ((tracks: TrackWithAudioFeatures[]) => TrackWithAudioFeatures[]) | undefined;\n  titleText: string;\n}\n\nconst filters: { [key: string]: React.FunctionComponent<any> } = {\n  \"Add Playlist\": FilterAddPlaylists,\n  Reverse: FilterReverse,\n  Randomise: FilterRandomise,\n  \"Filter Audio Feature\": FilterAudioFeaturePredicate,\n  \"Order by Audio Feature\": FilterOrderByAudioFeature,\n  \"Remove Duplicates\": FilterDistinct\n};\n\nconst track_identity_function = (tracks: TrackWithAudioFeatures[]): TrackWithAudioFeatures[] =>\n  tracks;\n\nconst Tools: React.FunctionComponent<IProps> = (props: IProps) => {\n  const {\n    token,\n    user,\n    playlists,\n    tracks,\n    playlistsLoading,\n    refreshPlaylist,\n    refreshUsersPlaylists\n  } = props;\n\n  const [appliedFilters, setAppliedFilters] = useState<AppliedFilter[]>([\n    {\n      filterName: \"Add Playlist\",\n      filter: track_identity_function,\n      titleText: \"\"\n    }\n  ]);\n  const [addFilterDropdownSelection, setAddFilterDropdownSelection] = useState(\n    Object.keys(filters)[0]\n  );\n  const [activeCardEventKey, setActiveCardEventKey] = useState(\"0\"); // Need to keep track of these as dropdowns in the accordion will close cards\n  const [filteredTracks, setFilteredTracks] = useState<TrackWithAudioFeatures[]>([]);\n\n  // Track table open state (need to track this in here otherwise it will close on every change)\n  const [trackTableOpen, setTrackTableOpen] = useState(false);\n  const trackTableOpenToggle = () => setTrackTableOpen(!trackTableOpen);\n\n  useEffect(() => {\n    // Apply new filters as they appear\n    const currentFilters = appliedFilters.map((af) => af.filter);\n    if (currentFilters.indexOf(undefined) === -1) {\n      setFilteredTracks(\n        appliedFilters\n          .map((af) => af.filter as (tracks: TrackWithAudioFeatures[]) => TrackWithAudioFeatures[])\n          .reduce((accumulator: TrackWithAudioFeatures[], filter) => filter(accumulator), [])\n      );\n    } else {\n      setFilteredTracks([]);\n    }\n  }, [appliedFilters]);\n\n  const header = (\n    <Container className=\"mt-3 mb-4\">\n      <h1 className=\"text-center\">Playlist Tools</h1>\n      <p className=\"text-center lead col-md-7 mx-auto\">\n        Apply filters and functions to manipulate your playlists.\n      </p>\n    </Container>\n  );\n\n  if (user === undefined) {\n    return (\n      <>\n        {header}\n        <Container className=\"text-center\">\n          <h2>Sign into Spotify</h2>\n          <p>\n            To get access to your playlists and the ability to create playlists, you need to sign\n            into Spotify.\n          </p>\n          <SpotifyLoginStatusButton user={user} />\n        </Container>\n      </>\n    );\n  }\n\n  const onCardHeaderClick = (eventKey: string) => () =>\n    setActiveCardEventKey(activeCardEventKey !== eventKey ? eventKey : \"\");\n  const filterDropdownSelect = (filterName: string) => () =>\n    setAddFilterDropdownSelection(filterName);\n  const addFilter = () => {\n    setActiveCardEventKey(appliedFilters.length + \"\");\n    setAppliedFilters((currentlyAppliedFilters) => [\n      ...currentlyAppliedFilters,\n      { filterName: addFilterDropdownSelection, filter: undefined, titleText: \"\" }\n    ]);\n  };\n  const removeFilter = (index: number) => (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    setAppliedFilters((currentlyAppliedFilters) => {\n      let newListOfFeatures = [...currentlyAppliedFilters];\n      newListOfFeatures.splice(index, 1);\n      return newListOfFeatures;\n    });\n    event.stopPropagation();\n  };\n\n  const filterComponentOutputCallback = (index: number) => (\n    filter: ((tracks: TrackWithAudioFeatures[]) => TrackWithAudioFeatures[]) | undefined,\n    titleText: string\n  ) => {\n    setAppliedFilters((currentlyAppliedFilters) => {\n      let newListOfFeatures = [...currentlyAppliedFilters];\n      newListOfFeatures[index] = {\n        filterName: newListOfFeatures[index].filterName,\n        filter: filter,\n        titleText: titleText\n      };\n      return newListOfFeatures;\n    });\n  };\n\n  const onExport = (name: string, isPublic: boolean): Promise<boolean> => {\n    return new Promise(async (resolve, reject) => {\n      if (filteredTracks.length === 0) {\n        cogoToast.warn(\"No songs present after filtering. Will not create an empty playlist.\", {\n          position: \"bottom-center\",\n          heading: \"No Songs\",\n          hideAfter: 10,\n          onClick: (hide: any) => hide()\n        });\n        reject();\n        return;\n      }\n\n      if (token !== undefined && user !== undefined) {\n        // Map the sorted tracks to uris\n        let track_uris: string[] = filteredTracks.map((t) => tracks[t.id].uri);\n        // Create the playlist\n        let success: boolean = await createPlaylist(\n          token.value,\n          user,\n          name,\n          isPublic,\n          track_uris\n        ).then(\n          (playlist) => {\n            refreshUsersPlaylists(false); // Get the new playlist by refreshing the playlist list (keep current track ids to not loose plot data)\n            return true;\n          },\n          (err) => {\n            console.error(err);\n            return false;\n          }\n        );\n        resolve(success);\n      }\n      resolve(false);\n    });\n  };\n\n  return (\n    <>\n      {header}\n\n      <Container className=\"mb-5\">\n        <Accordion activeKey={activeCardEventKey}>\n          {appliedFilters.map((appliedFilter: AppliedFilter, index: number) => {\n            let FilterComponent = filters[appliedFilter.filterName];\n            return (\n              <Card key={index + appliedFilter.filterName} style={{ overflow: \"visible\" }}>\n                <Card.Header\n                  className=\"d-flex align-items-center p-1\"\n                  style={{ cursor: \"pointer\" }}\n                  onClick={onCardHeaderClick(\"\" + index)}\n                >\n                  <Button variant={appliedFilter.filter === undefined ? \"danger\" : \"primary\"}>\n                    {appliedFilter.filterName}\n                  </Button>\n                  <span className=\"ml-3 flex-grow-1\">{appliedFilter.titleText}</span>\n                  {index !== 0 && (\n                    <Button variant=\"danger\" className=\"float-right\" onClick={removeFilter(index)}>\n                      -\n                    </Button>\n                  )}\n                </Card.Header>\n                <Accordion.Collapse eventKey={\"\" + index}>\n                  <Card.Body>\n                    <FilterComponent\n                      outputCallback={filterComponentOutputCallback(index)}\n                      playlists={playlists}\n                      tracks={tracks}\n                      playlistsLoading={playlistsLoading}\n                      refreshPlaylist={refreshPlaylist}\n                    />\n                  </Card.Body>\n                </Accordion.Collapse>\n              </Card>\n            );\n          })}\n        </Accordion>\n\n        <div className=\"mt-3 text-center\">\n          <InputGroup className=\"w-auto d-inline-flex\">\n            <InputGroup.Prepend>\n              <InputGroup.Text>Add filter</InputGroup.Text>\n            </InputGroup.Prepend>\n            <DropdownButton\n              as={InputGroup.Prepend}\n              variant=\"outline-primary\"\n              title={addFilterDropdownSelection}\n              id=\"add-filter\"\n            >\n              {Object.keys(filters)\n                .sort()\n                .map((filterName) => (\n                  <Dropdown.Item key={filterName} onClick={filterDropdownSelect(filterName)}>\n                    {filterName}\n                  </Dropdown.Item>\n                ))}\n            </DropdownButton>\n            <InputGroup.Append>\n              <Button onClick={addFilter}>Add</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </div>\n\n        <div className=\"my-5 text-center\">\n          <TrackTable\n            tracks={filteredTracks}\n            open={trackTableOpen}\n            openToggle={trackTableOpenToggle}\n          />\n        </div>\n\n        <div className=\"mb-5 text-center\">\n          <ExportPlaylistInput onExport={onExport} />\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default Tools;\n"]},"metadata":{},"sourceType":"module"}