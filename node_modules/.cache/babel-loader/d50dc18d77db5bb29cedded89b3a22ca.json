{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Compare/ScatterPlotDualAudioFeatureComparison.tsx\";\nimport React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { availableTrackAudioFeatures } from \"../../models/Spotify\";\nimport { getSupportedTrackAudioFeaturesFromPlaylist } from \"../../logic/Spotify\";\nconst plotLimitExpand = 0.01; // To help get 0 and 1 grid lines\n\nconst ScatterPlotDualAudioFeatureComparison = props => {\n  const {\n    playlists,\n    tracks,\n    x_audio_feature_name,\n    y_audio_feature_name\n  } = props; // Audio feature helpers\n\n  const x_audio_feature = availableTrackAudioFeatures[x_audio_feature_name];\n  const y_audio_feature = availableTrackAudioFeatures[y_audio_feature_name]; // Audio feature objects that exist for the playlists provided\n\n  const supportedTrackAudioFeaturesPerPlaylist = playlists.map(playlist => getSupportedTrackAudioFeaturesFromPlaylist(playlist, tracks)); // Max and min points in the data\n\n  const all_x_values = supportedTrackAudioFeaturesPerPlaylist.map(playlistAudioFeatures => playlistAudioFeatures.map(af => af[x_audio_feature.key])).flat();\n  const all_y_values = supportedTrackAudioFeaturesPerPlaylist.map(playlistAudioFeatures => playlistAudioFeatures.map(af => af[y_audio_feature.key])).flat();\n  const points_x_min = Math.min(...all_x_values);\n  const points_y_min = Math.min(...all_y_values);\n  const points_x_max = Math.max(...all_x_values);\n  const points_y_max = Math.max(...all_y_values); // The min and max are passed in, but still take the points into account just incase there are values outside of the defined range\n\n  const scale_x_min = x_audio_feature.min !== undefined ? Math.min(x_audio_feature.min, points_x_min) : undefined;\n  const scale_x_max = x_audio_feature.max !== undefined ? Math.max(x_audio_feature.max, points_x_max) : undefined;\n  const scale_y_min = y_audio_feature.min !== undefined ? Math.min(y_audio_feature.min, points_y_min) : undefined;\n  const scale_y_max = y_audio_feature.max !== undefined ? Math.max(y_audio_feature.max, points_y_max) : undefined;\n  return /*#__PURE__*/React.createElement(Plot, {\n    data: playlists.map((playlist, index) => ({\n      x: supportedTrackAudioFeaturesPerPlaylist[index].map(af => af[x_audio_feature.key]),\n      y: supportedTrackAudioFeaturesPerPlaylist[index].map(af => af[y_audio_feature.key]),\n      text: supportedTrackAudioFeaturesPerPlaylist[index].map(af => {\n        const track = tracks[af.id];\n        return \"Title: \" + track.name + \"<br>Artist: \" + track.artists.map(a => a.name).join(\", \") + \"<br>\" + x_audio_feature_name + \": \" + af[x_audio_feature.key] + \"<br>\" + y_audio_feature_name + \": \" + af[y_audio_feature.key];\n      }),\n      hoverinfo: \"text\",\n      mode: \"markers\",\n      marker: {\n        size: 7\n      },\n      name: playlist.name\n    })),\n    layout: {\n      hovermode: \"closest\",\n      margin: {\n        t: 0,\n        b: 0,\n        l: 0,\n        r: 0\n      },\n      plot_bgcolor: \"transparent\",\n      paper_bgcolor: \"transparent\",\n      xaxis: {\n        range: [scale_x_min !== undefined ? scale_x_min - plotLimitExpand : undefined, scale_x_max !== undefined ? scale_x_max + plotLimitExpand : undefined],\n        zeroline: false\n      },\n      yaxis: {\n        range: [scale_y_min !== undefined ? scale_y_min - plotLimitExpand : undefined, scale_y_max !== undefined ? scale_y_max + plotLimitExpand : undefined],\n        zeroline: false\n      },\n      legend: {\n        orientation: \"h\"\n      }\n    },\n    useResizeHandler: true,\n    config: {\n      displayModeBar: false,\n      responsive: true\n    },\n    className: \"w-100 m-auto\",\n    style: {\n      maxWidth: 700,\n      height: 450\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default ScatterPlotDualAudioFeatureComparison;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Compare/ScatterPlotDualAudioFeatureComparison.tsx"],"names":["React","Plot","availableTrackAudioFeatures","getSupportedTrackAudioFeaturesFromPlaylist","plotLimitExpand","ScatterPlotDualAudioFeatureComparison","props","playlists","tracks","x_audio_feature_name","y_audio_feature_name","x_audio_feature","y_audio_feature","supportedTrackAudioFeaturesPerPlaylist","map","playlist","all_x_values","playlistAudioFeatures","af","key","flat","all_y_values","points_x_min","Math","min","points_y_min","points_x_max","max","points_y_max","scale_x_min","undefined","scale_x_max","scale_y_min","scale_y_max","index","x","y","text","track","id","name","artists","a","join","hoverinfo","mode","marker","size","hovermode","margin","t","b","l","r","plot_bgcolor","paper_bgcolor","xaxis","range","zeroline","yaxis","legend","orientation","displayModeBar","responsive","maxWidth","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport {\n  PlaylistObjectSimplifiedWithTrackIds,\n  availableTrackAudioFeatures,\n  TrackWithAudioFeatures\n} from \"../../models/Spotify\";\nimport { getSupportedTrackAudioFeaturesFromPlaylist } from \"../../logic/Spotify\";\n\nconst plotLimitExpand = 0.01; // To help get 0 and 1 grid lines\n\ninterface IProps {\n  playlists: PlaylistObjectSimplifiedWithTrackIds[];\n  tracks: { [key: string]: TrackWithAudioFeatures };\n  x_audio_feature_name: string;\n  y_audio_feature_name: string;\n}\n\nconst ScatterPlotDualAudioFeatureComparison: React.FunctionComponent<IProps> = (props: IProps) => {\n  const { playlists, tracks, x_audio_feature_name, y_audio_feature_name } = props;\n\n  // Audio feature helpers\n  const x_audio_feature = availableTrackAudioFeatures[x_audio_feature_name];\n  const y_audio_feature = availableTrackAudioFeatures[y_audio_feature_name];\n\n  // Audio feature objects that exist for the playlists provided\n  const supportedTrackAudioFeaturesPerPlaylist: SpotifyApi.AudioFeaturesObject[][] = playlists.map(\n    (playlist) => getSupportedTrackAudioFeaturesFromPlaylist(playlist, tracks)\n  );\n\n  // Max and min points in the data\n  const all_x_values: number[] = supportedTrackAudioFeaturesPerPlaylist\n    .map((playlistAudioFeatures) =>\n      playlistAudioFeatures.map((af) => af[x_audio_feature.key] as number)\n    )\n    .flat();\n  const all_y_values: number[] = supportedTrackAudioFeaturesPerPlaylist\n    .map((playlistAudioFeatures) =>\n      playlistAudioFeatures.map((af) => af[y_audio_feature.key] as number)\n    )\n    .flat();\n  const points_x_min: number = Math.min(...all_x_values);\n  const points_y_min: number = Math.min(...all_y_values);\n  const points_x_max: number = Math.max(...all_x_values);\n  const points_y_max: number = Math.max(...all_y_values);\n\n  // The min and max are passed in, but still take the points into account just incase there are values outside of the defined range\n  const scale_x_min: number | undefined =\n    x_audio_feature.min !== undefined ? Math.min(x_audio_feature.min, points_x_min) : undefined;\n  const scale_x_max: number | undefined =\n    x_audio_feature.max !== undefined ? Math.max(x_audio_feature.max, points_x_max) : undefined;\n  const scale_y_min: number | undefined =\n    y_audio_feature.min !== undefined ? Math.min(y_audio_feature.min, points_y_min) : undefined;\n  const scale_y_max: number | undefined =\n    y_audio_feature.max !== undefined ? Math.max(y_audio_feature.max, points_y_max) : undefined;\n\n  return (\n    <Plot\n      data={playlists.map((playlist: PlaylistObjectSimplifiedWithTrackIds, index: number) => ({\n        x: supportedTrackAudioFeaturesPerPlaylist[index].map(\n          (af) => af[x_audio_feature.key] as number\n        ),\n        y: supportedTrackAudioFeaturesPerPlaylist[index].map(\n          (af) => af[y_audio_feature.key] as number\n        ),\n        text: supportedTrackAudioFeaturesPerPlaylist[index].map((af) => {\n          const track = tracks[af.id];\n          return (\n            \"Title: \" +\n            track.name +\n            \"<br>Artist: \" +\n            track.artists.map((a) => a.name).join(\", \") +\n            \"<br>\" +\n            x_audio_feature_name +\n            \": \" +\n            af[x_audio_feature.key] +\n            \"<br>\" +\n            y_audio_feature_name +\n            \": \" +\n            af[y_audio_feature.key]\n          );\n        }),\n        hoverinfo: \"text\",\n        mode: \"markers\",\n        marker: {\n          size: 7\n        },\n        name: playlist.name\n      }))}\n      layout={{\n        hovermode: \"closest\",\n        margin: { t: 0, b: 0, l: 0, r: 0 },\n        plot_bgcolor: \"transparent\",\n        paper_bgcolor: \"transparent\",\n        xaxis: {\n          range: [\n            scale_x_min !== undefined ? scale_x_min - plotLimitExpand : undefined,\n            scale_x_max !== undefined ? scale_x_max + plotLimitExpand : undefined\n          ],\n          zeroline: false\n        },\n        yaxis: {\n          range: [\n            scale_y_min !== undefined ? scale_y_min - plotLimitExpand : undefined,\n            scale_y_max !== undefined ? scale_y_max + plotLimitExpand : undefined\n          ],\n          zeroline: false\n        },\n        legend: {\n          orientation: \"h\"\n        }\n      }}\n      useResizeHandler={true}\n      config={{\n        displayModeBar: false,\n        responsive: true\n      }}\n      className=\"w-100 m-auto\"\n      style={{\n        maxWidth: 700,\n        height: 450\n      }}\n    />\n  );\n};\n\nexport default ScatterPlotDualAudioFeatureComparison;\n"]},"metadata":{},"sourceType":"module"}