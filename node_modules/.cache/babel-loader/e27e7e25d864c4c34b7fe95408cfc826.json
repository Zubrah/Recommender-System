{"ast":null,"code":"var _jsxFileName = \"/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Compare/BoxPlotAudioFeatureComparison.tsx\";\nimport React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { getSupportedTrackAudioFeaturesFromPlaylist } from \"../../logic/Spotify\";\nconst plotLimitExpand = 0.01; // To help get 0 and 1 grid lines\n\nconst BoxPlotAudioFeatureComparison = props => {\n  const {\n    selectedPlaylists,\n    tracks,\n    audioFeature,\n    max,\n    min\n  } = props;\n  return /*#__PURE__*/React.createElement(Plot, {\n    data: selectedPlaylists.map(playlist => ({\n      x: getSupportedTrackAudioFeaturesFromPlaylist(playlist, tracks).map(afs => afs[audioFeature]),\n      type: \"box\",\n      hoverinfo: \"text\",\n      text: getSupportedTrackAudioFeaturesFromPlaylist(playlist, tracks).map(af => tracks[af.id].name + \"<br>by \" + tracks[af.id].artists.map(a => a.name).join(\", \")),\n      name: playlist.name\n    })),\n    layout: {\n      hovermode: \"closest\",\n      margin: {\n        t: 0,\n        b: 0,\n        l: 0,\n        r: 5\n      },\n      xaxis: {\n        range: [min !== undefined ? min - plotLimitExpand : undefined, max !== undefined ? max + plotLimitExpand : undefined],\n        showgrid: true,\n        zeroline: false\n      },\n      yaxis: {\n        ticks: \"\",\n        showticklabels: false\n      },\n      autosize: true,\n      legend: {\n        orientation: \"h\"\n      }\n    },\n    useResizeHandler: true,\n    config: {\n      displayModeBar: false,\n      responsive: true\n    },\n    className: \"w-100 m-auto\",\n    style: {\n      maxWidth: 800,\n      height: 50 + selectedPlaylists.length * 60\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default BoxPlotAudioFeatureComparison;","map":{"version":3,"sources":["/Users/zubrah_/Desktop/New folder/Hello world/emotionify/src/pages/Compare/BoxPlotAudioFeatureComparison.tsx"],"names":["React","Plot","getSupportedTrackAudioFeaturesFromPlaylist","plotLimitExpand","BoxPlotAudioFeatureComparison","props","selectedPlaylists","tracks","audioFeature","max","min","map","playlist","x","afs","type","hoverinfo","text","af","id","name","artists","a","join","hovermode","margin","t","b","l","r","xaxis","range","undefined","showgrid","zeroline","yaxis","ticks","showticklabels","autosize","legend","orientation","displayModeBar","responsive","maxWidth","height","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,SAASC,0CAAT,QAA2D,qBAA3D;AAEA,MAAMC,eAAe,GAAG,IAAxB,C,CAA8B;;AAU9B,MAAMC,6BAA8D,GAAIC,KAAD,IAAmB;AACxF,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA,YAA7B;AAA2CC,IAAAA,GAA3C;AAAgDC,IAAAA;AAAhD,MAAwDL,KAA9D;AAEA,sBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAEC,iBAAiB,CAACK,GAAlB,CAAuBC,QAAD,KAAqD;AAC/EC,MAAAA,CAAC,EAAEX,0CAA0C,CAACU,QAAD,EAAWL,MAAX,CAA1C,CAA6DI,GAA7D,CACAG,GAAD,IAASA,GAAG,CAACN,YAAD,CADX,CAD4E;AAI/EO,MAAAA,IAAI,EAAE,KAJyE;AAK/EC,MAAAA,SAAS,EAAE,MALoE;AAM/EC,MAAAA,IAAI,EAAEf,0CAA0C,CAACU,QAAD,EAAWL,MAAX,CAA1C,CAA6DI,GAA7D,CACHO,EAAD,IACEX,MAAM,CAACW,EAAE,CAACC,EAAJ,CAAN,CAAcC,IAAd,GAAqB,SAArB,GAAiCb,MAAM,CAACW,EAAE,CAACC,EAAJ,CAAN,CAAcE,OAAd,CAAsBV,GAAtB,CAA2BW,CAAD,IAAOA,CAAC,CAACF,IAAnC,EAAyCG,IAAzC,CAA8C,IAA9C,CAF/B,CANyE;AAU/EH,MAAAA,IAAI,EAAER,QAAQ,CAACQ;AAVgE,KAArD,CAAtB,CADR;AAaE,IAAA,MAAM,EAAE;AACNI,MAAAA,SAAS,EAAE,SADL;AAENC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE,CAAX;AAAcC,QAAAA,CAAC,EAAE,CAAjB;AAAoBC,QAAAA,CAAC,EAAE;AAAvB,OAFF;AAGNC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,CACLrB,GAAG,KAAKsB,SAAR,GAAoBtB,GAAG,GAAGP,eAA1B,GAA4C6B,SADvC,EAELvB,GAAG,KAAKuB,SAAR,GAAoBvB,GAAG,GAAGN,eAA1B,GAA4C6B,SAFvC,CADF;AAKLC,QAAAA,QAAQ,EAAE,IALL;AAMLC,QAAAA,QAAQ,EAAE;AANL,OAHD;AAWNC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,EADF;AAELC,QAAAA,cAAc,EAAE;AAFX,OAXD;AAeNC,MAAAA,QAAQ,EAAE,IAfJ;AAgBNC,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAhBF,KAbV;AAiCE,IAAA,gBAAgB,EAAE,IAjCpB;AAkCE,IAAA,MAAM,EAAE;AACNC,MAAAA,cAAc,EAAE,KADV;AAENC,MAAAA,UAAU,EAAE;AAFN,KAlCV;AAsCE,IAAA,SAAS,EAAC,cAtCZ;AAuCE,IAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,GADL;AAELC,MAAAA,MAAM,EAAE,KAAKtC,iBAAiB,CAACuC,MAAlB,GAA2B;AAFnC,KAvCT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA8CD,CAjDD;;AAmDA,eAAezC,6BAAf","sourcesContent":["import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { PlaylistObjectSimplifiedWithTrackIds, TrackWithAudioFeatures } from \"../../models/Spotify\";\nimport { getSupportedTrackAudioFeaturesFromPlaylist } from \"../../logic/Spotify\";\n\nconst plotLimitExpand = 0.01; // To help get 0 and 1 grid lines\n\ninterface IProps {\n  selectedPlaylists: PlaylistObjectSimplifiedWithTrackIds[];\n  tracks: { [key: string]: TrackWithAudioFeatures };\n  audioFeature: keyof SpotifyApi.AudioFeaturesObject;\n  min: number | undefined;\n  max: number | undefined;\n}\n\nconst BoxPlotAudioFeatureComparison: React.FunctionComponent<IProps> = (props: IProps) => {\n  const { selectedPlaylists, tracks, audioFeature, max, min } = props;\n\n  return (\n    <Plot\n      data={selectedPlaylists.map((playlist: PlaylistObjectSimplifiedWithTrackIds) => ({\n        x: getSupportedTrackAudioFeaturesFromPlaylist(playlist, tracks).map(\n          (afs) => afs[audioFeature]\n        ),\n        type: \"box\",\n        hoverinfo: \"text\",\n        text: getSupportedTrackAudioFeaturesFromPlaylist(playlist, tracks).map(\n          (af) =>\n            tracks[af.id].name + \"<br>by \" + tracks[af.id].artists.map((a) => a.name).join(\", \")\n        ),\n        name: playlist.name\n      }))}\n      layout={{\n        hovermode: \"closest\",\n        margin: { t: 0, b: 0, l: 0, r: 5 },\n        xaxis: {\n          range: [\n            min !== undefined ? min - plotLimitExpand : undefined,\n            max !== undefined ? max + plotLimitExpand : undefined\n          ],\n          showgrid: true,\n          zeroline: false\n        },\n        yaxis: {\n          ticks: \"\",\n          showticklabels: false\n        },\n        autosize: true,\n        legend: {\n          orientation: \"h\"\n        }\n      }}\n      useResizeHandler={true}\n      config={{\n        displayModeBar: false,\n        responsive: true\n      }}\n      className=\"w-100 m-auto\"\n      style={{\n        maxWidth: 800,\n        height: 50 + selectedPlaylists.length * 60\n      }}\n    />\n  );\n};\n\nexport default BoxPlotAudioFeatureComparison;\n"]},"metadata":{},"sourceType":"module"}